"""Directs the executor to include this field or fragment only when the `if` argument is true."""
directive @include(
"""Included when true."""
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""Directs the executor to skip this field or fragment when the `if` argument is true."""
directive @skip(
"""Skipped when true."""
	if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"""Marks an element of a GraphQL schema as no longer supported."""
directive @deprecated(
"""Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted in [Markdown](https://daringfireball.net/projects/markdown/)."""
	reason: String
) on FIELD_DEFINITION | ENUM_VALUE

"""Represents `true` or `false` values."""
scalar Boolean

"""Represents textual data as UTF-8 character sequences. This type is most often used by GraphQL to represent free-form human-readable text."""
scalar String

"""The query root for this schema"""
type Query {
"""Find an agent by its slug"""
	agent(
"""The UUID for the agent, prefixed by its organization's slug i.e. `acme-inc/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`"""
		slug: ID!
	): Agent
"""Find an agent token by its slug"""
	agentToken(
"""The UUID for the agent token, prefixed by its organization's slug i.e. `acme-inc/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`"""
		slug: ID!
	): AgentToken
"""Find a API Acccess Token code"""
	apiAccessTokenCode(
"""The code provided by the Auth API"""
		code: ID!
	): APIAccessTokenCode
"""Find an artifact by its UUID"""
	artifact(
		uuid: ID!
	): Artifact
"""Find an audit event via its uuid"""
	auditEvent(
"""The UUID for the audit event i.e. `0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`"""
		uuid: ID!
	): AuditEvent
"""Find a build by its slug or UUID"""
	build(
"""The number of the build, prefixed with its organization and pipeline. i.e. `acme-inc/my-pipeline/123`"""
		slug: ID
"""The UUID of the build"""
		uuid: ID
	): Build
"""Find a GraphQL snippet"""
	graphQLSnippet(
"""The UUID for this GraphQL snippet"""
		uuid: String!
	): GraphQLSnippet
"""Find a build job by its UUID"""
	job(
		uuid: ID!
	): Job
"""Fetches an object given its ID."""
	node(
"""ID of the object."""
		id: ID!
	): Node
"""Find a notification service via its UUID"""
	notificationService(
"""The UUID for the notification service i.e. `0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`"""
		uuid: ID!
	): NotificationService
"""Find an organization by its slug"""
	organization(
"""The organizations slug"""
		slug: ID!
	): Organization
"""Find an organization invitation via its slug"""
	organizationInvitation(
"""The UUID for the invitation, prefixed by its organization's slug i.e. `acme-inc/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`"""
		slug: ID!
	): OrganizationInvitation
"""Find an organization membership via its slug"""
	organizationMember(
"""The UUID for the membership, prefixed by its organization's slug i.e. `acme-inc/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`"""
		slug: ID!
	): OrganizationMember
"""Find a pipeline by its slug"""
	pipeline(
"""The slug of the pipeline, prefixed with its organization. i.e. `acme-inc/my-pipeline`"""
		slug: ID!
	): Pipeline
"""Find a pipeline schedule by its slug"""
	pipelineSchedule(
"""The UUID for the pipeline schedule, prefixed by its organization and pipeline's slug i.e. `acme-inc/my-pipeline/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`"""
		slug: ID!
	): PipelineSchedule
"""Find an sso provider either using it's slug, or UUID"""
	ssoProvider(
"""The slug for the sso provider, prefixed by its organization's slug i.e. `acme-inc/0bd5ea7c-89b3-4f40-8ca3-ffac805771eb`"""
		slug: ID
"""The UUID of the sso provider"""
		uuid: ID
	): SSOProvider
"""Find a team by its UUID"""
	team(
"""The slug of the team, prefixed with its organization. i.e. `acme-inc/awesome-team`"""
		slug: ID!
	): Team
"""Context of the current user using the GraphQL API"""
	viewer: Viewer
}

"""Represents the current user session"""
type Viewer implements Node{
	authorizations(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
		type: [AuthorizationType!]
	): AuthorizationConnection
	builds(
		first: Int
		last: Int
		state: BuildStates
		branch: String
		metaData: [String!]
	): BuildConnection
	changelogs(
		first: Int
		last: Int
		read: Boolean
	): ChangelogConnection
"""Emails associated with the current user"""
	emails(
		first: Int
		last: Int
		verified: Boolean
	): EmailConnection
"""The ID of the current user"""
	id: ID!
	jobs(
		first: Int
		after: String
		last: Int
		before: String
		type: [JobTypes!]
		state: [JobStates!]
		priority: JobPrioritySearch
		agentQueryRules: [String!]
"""Order the jobs"""
		order: JobOrder
	): JobConnection
	notice(
		namespace: NoticeNamespaces!
		scope: String!
	): Notice
	organizations(
		first: Int
		last: Int
	): OrganizationConnection
"""The current user's permissions"""
	permissions: ViewerPermissions!
"""The user's active TOTP configuration, if any.

This field is private, requires an escalated session, and cannot be accessed via the public GraphQL API.
"""
	totp(
		id: ID
	): TOTP
"""The current user"""
	user: User
}

"""An object with an ID."""
interface Node {
"""An object with an ID."""
	id: ID!
}

"""Represents a unique identifier that is Base64 obfuscated. It is often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"VXNlci0xMA=="`) or integer (such as `4`) input value will be accepted as an ID."""
scalar ID

"""A user"""
type User implements Node{
	avatar: Avatar!
"""If this user account is an official bot managed by Buildkite"""
	bot: Boolean!
"""Returns builds that this user has created."""
	builds(
		first: Int
		last: Int
		state: [BuildStates!]
		branch: [String!]
		metaData: [String!]
	): BuildConnection
"""The primary email for the user"""
	email: String!
"""Does the user have a password set"""
	hasPassword: Boolean!
	id: ID!
"""The name of the user"""
	name: String!
"""The public UUID of the user"""
	uuid: String!
}

"""An avatar belonging to a user"""
type Avatar {
"""The URL of the avavtar"""
	url: String!
}

type BuildConnection implements Connection{
	count: Int!
	edges: [BuildEdge]
	pageInfo: PageInfo
}

interface Connection {
	count: Int!
	pageInfo: PageInfo
}

"""Information about pagination in a connection."""
type PageInfo {
"""When paginating forwards, the cursor to continue."""
	endCursor: String
"""When paginating forwards, are there more items?"""
	hasNextPage: Boolean!
"""When paginating backwards, are there more items?"""
	hasPreviousPage: Boolean!
"""When paginating backwards, the cursor to continue."""
	startCursor: String
}

"""Represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1."""
scalar Int

type BuildEdge {
	cursor: String!
	node: Build
}

"""A build from a pipeline"""
type Build implements Node{
	annotations(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
	): AnnotationConnection
"""The current blocked state of the build"""
	blockedState: BuildBlockedStates
"""The branch for the build"""
	branch: String!
"""The time when the build was cancelled"""
	canceledAt: DateTime
"""The user who canceled this build. If the build was canceled, and this value is null, then it was canceled automatically by Buildkite"""
	canceledBy: User
"""The fully-qualified commit for the build"""
	commit: String!
"""The time when the build was created"""
	createdAt: DateTime
	createdBy: BuildCreator
"""Custom environment variables passed to this build"""
	env: [String!]
"""The time when the build finished"""
	finishedAt: DateTime
	id: ID!
	jobs(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
		type: [JobTypes!]
		state: [JobStates!]
		priority: JobPrioritySearch
		agentQueryRules: [String!]
		concurrency: JobConcurrencySearch
"""Whether or not the command job passed. Passing `false` will return all failed jobs (including "soft failed" jobs)"""
		passed: Boolean
"""Filtering jobs based on related step information"""
		step: JobStepSearch
"""Order the jobs"""
		order: JobOrder
	): JobConnection
"""The message for the build"""
	message: String
	metaData(
		first: Int
		last: Int
	): BuildMetaDataConnection
"""The number of the build"""
	number: Int!
	organization: Organization!
	pipeline: Pipeline!
	pullRequest: PullRequest
"""The build that this build was rebuilt from"""
	rebuiltFrom: Build
"""The time when the build became scheduled for running"""
	scheduledAt: DateTime
"""Where the build was created"""
	source: BuildSource!
"""The time when the build started running"""
	startedAt: DateTime
"""The current state of the build"""
	state: BuildStates!
"""The job that this build was triggered from"""
	triggeredFrom: JobTypeTrigger
"""The URL for the build"""
	url: String!
"""The UUID for the build"""
	uuid: String!
}

"""All the possible states a build can be in"""
enum BuildStates {
"""The build was skipped"""
	SKIPPED
"""The build is currently being created"""
	CREATING
"""The build has yet to start running jobs"""
	SCHEDULED
"""The build is currently running jobs"""
	RUNNING
"""The build passed"""
	PASSED
"""The build failed"""
	FAILED
"""The build is failing"""
	FAILING
"""The build is currently being canceled"""
	CANCELING
"""The build was canceled"""
	CANCELED
"""The build is blocked"""
	BLOCKED
"""The build wasn't run"""
	NOT_RUN
}

"""All the possible blocked states a build can be in"""
enum BuildBlockedStates {
"""The blocked build is running"""
	RUNNING
"""The blocked build is passed"""
	PASSED
"""The blocked build is failed"""
	FAILED
}

interface BuildSource {
	name: String!
}

"""A pull request on a provider"""
type PullRequest {
	id: String!
}

"""Either a `User` or an `UnregisteredUser` type"""
union BuildCreator =User | UnregisteredUser

"""A person who hasn’t signed up to Buildkite"""
type UnregisteredUser {
	avatar: Avatar!
"""The email for the user"""
	email: String
"""The name of the user"""
	name: String
}

"""An organization"""
type Organization implements Node{
"""Returns agent access tokens for an Organization. By default returns all tokens, whether revoked or non-revoked."""
	agentTokens(
		first: Int
		last: Int
"""Filter tokens by whether they are revoked or not"""
		revoked: Boolean
	): AgentTokenConnection
	agents(
		first: Int
		after: String
		last: Int
		before: String
"""Search agents for the given query terms case insensitively across name and meta data"""
		search: String
"""Filter agents to those only having the matching meta data"""
		metaData: [String!]
"""Filter agents by membership of a given cluster"""
		cluster: ID
"""Filter agents to those within a given cluster queue"""
		clusterQueue: [ID!]
"""Filter agents by whether they are running a job or not"""
		isRunningJob: Boolean
	): AgentConnection
	auditEvents(
		first: Int
		after: String
		last: Int
		before: String
"""Filter events which occurred from the given date and time"""
		occurredAtFrom: DateTime
"""Filter events which occurred until the given date and time"""
		occurredAtTo: DateTime
"""Filter the events by type"""
		type: [AuditEventType!]
"""Filter the events by the type of actor who initiated them"""
		actorType: [AuditActorType!]
"""Filter the events by the IDs of the actors who initiated them"""
		actor: [ID!]
"""Filter the events by the type of subject they relate to"""
		subjectType: [AuditSubjectType!]
"""Filter the events by the IDs of the subject they relate to"""
		subject: [ID!]
"""Order the events"""
		order: OrganizationAuditEventOrders
	): OrganizationAuditEventConnection
"""Return cluster in the Organization by UUID"""
	cluster(
		id: ID!
	): Cluster
"""Returns clusters for an Organization"""
	clusters(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
"""Order the clusters"""
		order: ClusterOrder
	): ClusterConnection
"""The URL to an icon representing this organization"""
	iconUrl: String
	id: ID!
	invitations(
		first: Int
		after: String
		last: Int
		before: String
		state: [OrganizationInvitationStates!]
"""Order the invitations"""
		order: OrganizationInvitationOrders
	): OrganizationInvitationConnection
"""Whether teams is enabled for this organization"""
	isTeamsEnabled: Boolean!
	jobs(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
		type: [JobTypes!]
		state: [JobStates!]
		priority: JobPrioritySearch
		agentQueryRules: [String!]
		concurrency: JobConcurrencySearch
"""Whether or not the command job passed. Passing `false` will return all failed jobs (including "soft failed" jobs)"""
		passed: Boolean
"""Filtering jobs based on related step information"""
		step: JobStepSearch
"""Order the jobs"""
		order: JobOrder
	): JobConnection
"""Returns users within the organization"""
	members(
		first: Int
		after: String
		last: Int
		before: String
"""Search members named like the given query case insensitively"""
		search: String
"""The primary email of the team member"""
		email: String
"""Filter the members by team"""
		team: TeamSelector
"""Search members by their role"""
		role: [OrganizationMemberRole!]
		security: OrganizationMemberSecurityInput
		sso: OrganizationMemberSSOInput
"""Order the members"""
		order: OrganizationMemberOrder
	): OrganizationMemberConnection
"""The name of the organization"""
	name: String!
	permissions: OrganizationPermissions!
"""Return all the pipelines the current user has access to for this organization"""
	pipelines(
		first: Int
		after: String
		last: Int
		before: String
"""Search pipelines named like the given query case insensitively"""
		search: String
		repository: PipelineRepositoryInput
"""Filter pipelines based on whether or not they've been archived. If not provided, all pipelines are returned regardless of archived state."""
		archived: Boolean
"""Filter the pipelines by team"""
		team: TeamSelector
"""Only return favorited pipelines"""
		favorite: Boolean
"""Order the pipelines"""
		order: PipelineOrders
"""Filter pipelines with those that have paticular tags"""
		tags: [String!]
		createdAtFrom: DateTime
		createdAtTo: DateTime
	): PipelineConnection
"""Whether this organization is visible to everyone, including people outside it"""
	public: Boolean!
"""The slug used to represent the organization in URLs"""
	slug: String!
"""The single sign-on configuration of this organization"""
	sso: OrganizationSSO
"""Single sign on providers created for an organization"""
	ssoProviders(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
	): SSOProviderConnection
"""Return all the suite the current user has access to for this organization"""
	suites(
		first: Int
		after: String
		last: Int
		before: String
"""Search suites named like the given query case insensitively"""
		search: String
"""Filter the suites by team"""
		team: TeamSelector
"""Order the suites"""
		order: SuiteOrders
		createdAtFrom: DateTime
		createdAtTo: DateTime
	): SuiteConnection
"""Returns teams within the organization that the viewer can see"""
	teams(
		first: Int
		after: String
		last: Int
		before: String
"""Search teams"""
		search: String
"""Filter teams by pipeline"""
		pipeline: PipelineSelector
"""Filter teams by user membership"""
		user: UserSelector
"""Search teams by their privacy"""
		privacy: [TeamPrivacy!]
"""Order the teams"""
		order: TeamOrder
	): TeamConnection
"""The public UUID for this organization"""
	uuid: String!
}

type PipelineConnection implements Connection{
	count: Int!
	edges: [PipelineEdge]
	pageInfo: PageInfo
}

type PipelineEdge {
	cursor: String!
	node: Pipeline
}

"""A pipeline"""
type Pipeline implements Node{
"""Whether existing builds can be rebuilt as new builds."""
	allowRebuilds: Boolean
"""Whether this pipeline has been archived"""
	archived: Boolean!
"""The time when the pipeline was archived"""
	archivedAt: DateTime
"""The user that archived this pipeline"""
	archivedBy: User
"""A branch filter pattern to limit which pushed branches trigger builds on this pipeline."""
	branchConfiguration: String
"""Returns the builds for this pipeline"""
	builds(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
		state: [BuildStates!]
"""Use `%default` to search by the Pipelines default branch"""
		branch: [String!]
		commit: [String!]
		metaData: [String!]
		createdAtFrom: DateTime
		createdAtTo: DateTime
	): BuildConnection
"""When a new build is created on a branch, any previous builds that are running on the same branch will be automatically cancelled"""
	cancelIntermediateBuilds: Boolean!
"""Limit which branches build cancelling applies to, for example `!main` will ensure that the main branch won't have it's builds automatically cancelled."""
	cancelIntermediateBuildsBranchFilter: String
	cluster: Cluster
"""The shortest length to which any git commit ID may be truncated while guaranteeing referring to a unique commit"""
	commitShortLength: Int!
"""The time when the pipeline was created"""
	createdAt: DateTime
"""The user who created the pipeline"""
	createdBy: User
"""The default branch for this pipeline"""
	defaultBranch: String
"""The short description of the pipeline"""
	description: String
"""Returns true if the viewer has favorited this pipeline"""
	favorite: Boolean!
	id: ID!
	jobs(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
		type: [JobTypes!]
		state: [JobStates!]
		priority: JobPrioritySearch
		agentQueryRules: [String!]
		concurrency: JobConcurrencySearch
"""Whether or not the command job passed. Passing `false` will return all failed jobs (including "soft failed" jobs)"""
		passed: Boolean
"""Filtering jobs based on related step information"""
		step: JobStepSearch
"""Order the jobs"""
		order: JobOrder
	): JobConnection
	metrics(
		first: Int
		last: Int
	): PipelineMetricConnection
"""The name of the pipeline"""
	name: String!
"""The next build number in the sequence"""
	nextBuildNumber: Int!
	organization: Organization!
	permissions: PipelinePermissions!
"""Whether this pipeline is visible to everyone, including people outside this organization"""
	public: Boolean!
"""The repository for this pipeline"""
	repository: Repository
"""Schedules for this pipeline"""
	schedules(
		first: Int
	): PipelineScheduleConnection
"""When a new build is created on a branch, any previous builds that haven't yet started on the same branch will be automatically marked as skipped."""
	skipIntermediateBuilds: Boolean!
"""Limit which branches build skipping applies to, for example `!main` will ensure that the main branch won't have it's builds automatically skipped."""
	skipIntermediateBuildsBranchFilter: String
"""The slug of the pipeline"""
	slug: String!
	steps: PipelineSteps
"""Tags that have been given to this pipeline"""
	tags: [PipelineTag!]!
"""Teams associated with this pipeline"""
	teams(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
"""Search for teams associated that this pipeline is assigned to"""
		search: String
"""Order the pipelines returned"""
		order: TeamPipelineOrder
	): TeamPipelineConnection
"""The URL for the pipeline"""
	url: String!
"""The UUID of the pipeline"""
	uuid: String!
"""Whether this pipeline is visible to everyone, including people outside this organization"""
	visibility: PipelineVisibility!
"""The URL to use in your repository settings for commit webhooks"""
	webhookURL: String!
}

"""A tag associated with a pipeline"""
type PipelineTag {
"""The label for this tag"""
	label: String!
}

"""The visibility of the pipeline"""
enum PipelineVisibility {
"""The pipeline is public"""
	PUBLIC
"""The pipeline is private"""
	PRIVATE
}

"""A repository associated with a pipeline"""
type Repository {
"""The repository’s provider"""
	provider: RepositoryProvider
"""The git URL for this repository"""
	url: String!
}

interface RepositoryProvider {
	name: String!
	url: String
	webhookUrl: String
}

"""Steps defined on a pipeline"""
type PipelineSteps {
"""A YAML representation of the pipeline steps"""
	yaml: YAML
}

"""A blob of YAML"""
scalar YAML

"""An ISO-8601 encoded UTC date string"""
scalar DateTime

type Cluster {
"""Returns agent tokens for the Cluster"""
	agentTokens(
		first: Int
		last: Int
	): ClusterAgentTokenConnection
	createdBy: User
	description: String
	id: ID!
	name: String!
	organization: Organization
	queues(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
"""Order the cluster queues"""
		order: ClusterQueueOrder
	): ClusterQueueConnection
"""The public UUID for this cluster"""
	uuid: ID!
}

type ClusterAgentTokenConnection implements Connection{
	count: Int!
	edges: [ClusterAgentTokenEdge]
	pageInfo: PageInfo
}

type ClusterAgentTokenEdge {
	cursor: String!
	node: ClusterToken
}

"""A token used to connect an agent in cluster to Buildkite"""
type ClusterToken implements Node{
	cluster: Cluster
	createdBy: User
"""A description about what this cluster agent token is used for"""
	description: String
	id: ID!
"""The content of this cluster token"""
	token: String!
"""The public UUID for this cluster token"""
	uuid: ID!
}

type ClusterQueueConnection implements Connection{
	count: Int!
	edges: [ClusterQueueEdge]
	pageInfo: PageInfo
}

type ClusterQueueEdge {
	cursor: String!
	node: ClusterQueue
}

type ClusterQueue {
	cluster: Cluster
	createdBy: User
	description: String
	id: ID!
	key: String!
"""The public UUID for this cluster queue"""
	uuid: ID!
}

"""The diferent orders you can sort cluster queues by"""
enum ClusterQueueOrder {
"""Order by key alphabetically"""
	KEY
"""Order by the most recently created cluster queues first"""
	RECENTLY_CREATED
}

type JobConnection implements Connection{
	count: Int!
	edges: [JobEdge]
	pageInfo: PageInfo
}

type JobEdge {
	cursor: String!
	node: Job
}

"""Kinds of jobs that can exist on a build"""
union Job =JobTypeCommand | JobTypeBlock | JobTypeWait | JobTypeTrigger

"""A type of job that runs a command on an agent"""
type JobTypeCommand implements Node{
"""The agent that is running the job"""
	agent: Agent
"""The ruleset used to find an agent to run this job"""
	agentQueryRules: [String!]
"""Artifacts uploaded to this job"""
	artifacts(
		first: Int
		last: Int
	): ArtifactConnection
"""A glob of files to automatically upload after the job finishes"""
	automaticArtifactUploadPaths: String
"""The build that this job is a part of"""
	build: Build
"""The time when the job was cancelled"""
	canceledAt: DateTime
"""The cluster of this job"""
	cluster: Cluster
"""The cluster queue of this job"""
	clusterQueue: ClusterQueue
"""The command the job will run"""
	command: String
"""Concurrency information related to a job"""
	concurrency: JobConcurrency
"""The time when the job was created"""
	createdAt: DateTime
"""Environment variables for this job"""
	env: [String!]
"""Job events"""
	events(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
	): JobEventConnection!
"""The exit status returned by the command on the agent"""
	exitStatus: String
"""The time when the job was expired"""
	expiredAt: DateTime
"""The time when the job finished"""
	finishedAt: DateTime
	id: ID!
"""The label of the job"""
	label: String
"""The matrix configuration values for this particular job"""
	matrix: JSON
"""The index of this job within the parallel job group it is a part of. Null if this job is not part of a parallel job group."""
	parallelGroupIndex: Int
"""The total number of jobs in the parallel job group this job is a part of. Null if this job is not part of a parallel job group."""
	parallelGroupTotal: Int
"""If the job has finished and passed"""
	passed: Boolean!
"""The pipeline that this job is a part of"""
	pipeline: Pipeline
"""The priority of this job"""
	priority: JobPriority!
"""Job retry rules"""
	retryRules: JobRetryRules
"""The time when the job became available to be run by an agent"""
	runnableAt: DateTime
"""The time when the job became scheduled for running"""
	scheduledAt: DateTime
"""The termination signal which killed the command, if the command was killed"""
	signal: String
"""If the termination signal was sent by the agent, the reason the agent took that action. If this field is null, and the `signal` field is not null, the command was killed by another process or by the operating system."""
	signalReason: JobEventSignalReason
"""If the job soft failed"""
	softFailed: Boolean!
"""The time when the job started running"""
	startedAt: DateTime
"""The state of the job"""
	state: JobStates!
"""The step that defined this job. Some older jobs in the system may not have an associated step"""
	step: StepCommand
"""The URL for the job"""
	url: String!
"""The UUID for this job"""
	uuid: String!
}

"""All the possible states a job can be in"""
enum JobStates {
"""The job has just been created and doesn't have a state yet"""
	PENDING
"""The job is waiting on a `wait` step to finish"""
	WAITING
"""The job was in a `WAITING` state when the build failed"""
	WAITING_FAILED
"""The job is waiting on a `block` step to finish"""
	BLOCKED
"""The job was in a `BLOCKED` state when the build failed"""
	BLOCKED_FAILED
"""This `block` job has been manually unblocked"""
	UNBLOCKED
"""This `block` job was in an `UNBLOCKED` state when the build failed"""
	UNBLOCKED_FAILED
"""The job is waiting on a concurrency group check before becoming either `LIMITED` or `SCHEDULED`"""
	LIMITING
"""The job is waiting for jobs with the same concurrency group to finish"""
	LIMITED
"""The job is scheduled and waiting for an agent"""
	SCHEDULED
"""The job has been assigned to an agent, and it's waiting for it to accept"""
	ASSIGNED
"""The job was accepted by the agent, and now it's waiting to start running"""
	ACCEPTED
"""The job is runing"""
	RUNNING
"""The job has finished"""
	FINISHED
"""The job is currently canceling"""
	CANCELING
"""The job was canceled"""
	CANCELED
"""The job is timing out for taking too long"""
	TIMING_OUT
"""The job timed out"""
	TIMED_OUT
"""The job was skipped"""
	SKIPPED
"""The jobs configuration means that it can't be run"""
	BROKEN
"""The job expired before it was started on an agent"""
	EXPIRED
}

"""The reason why a signal was sent to the job's process, or why the process did not start"""
enum JobEventSignalReason {
"""The agent sent the signal to the process because the agent was stopped"""
	AGENT_STOP
"""The agent sent the signal to the process because the job was canceled"""
	CANCEL
"""The agent was unable to start the job process, often due to memory or resource constraints. Note that in this case, no signal was sent to the process, it simply never started."""
	PROCESS_RUN_ERROR
"""The agent pre-bootstrap hook refused the job. Note that in this case, no signal was sent to the process, the bootstrap was not run at all."""
	AGENT_REFUSED
}

"""Retry Rules for a job"""
type JobRetryRules {
	automatic: [JobRetryRuleAutomatic]
	manual: Boolean
}

"""Automatic retry rule configuration"""
type JobRetryRuleAutomatic {
	exitStatus: String
	limit: String
}

"""A blob of JSON represented as a pretty formatted string"""
scalar JSON

"""The priority with which a job will run"""
type JobPriority {
	number: Int
}

"""A step in a build that runs a command on an agent"""
type StepCommand implements Step{
"""The conditional evaluated for this step"""
	conditional: String
"""Dependencies of this job"""
	dependencies(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
	): DependencyConnection
"""The user-defined key for this step"""
	key: String
"""The UUID for this step"""
	uuid: String!
}

interface Step {
	conditional: String
	dependencies: DependencyConnection
	key: String
	uuid: String!
}

type DependencyConnection implements Connection{
	count: Int!
	edges: [DependencyEdge]
	pageInfo: PageInfo
}

type DependencyEdge {
	cursor: String!
	node: Dependency
}

type Dependency {
"""Is this dependency allowed to fail"""
	allowFailure: Boolean!
	id: ID!
"""The step key or step identifier that this step depends on"""
	key: String
"""The UUID for this dependency"""
	uuid: ID!
}

type JobEventConnection implements Connection{
	count: Int!
	edges: [JobEventEdge]
	pageInfo: PageInfo
}

type JobEventEdge {
	cursor: String!
	node: JobEvent!
}

interface JobEvent {
	actor: JobEventActor!
	id: ID!
	job: JobTypeCommand!
	timestamp: DateTime!
	type: JobEventType!
	uuid: ID!
}

"""All the possible types of events that happen to a Job"""
enum JobEventType {
"""The Job was assigned to an agent"""
	ASSIGNED
"""The Job was accepted by an agent"""
	ACCEPTED
"""The Job was started by an agent"""
	STARTED
"""The Job was finished by an agent"""
	FINISHED
"""The Job was canceled"""
	CANCELED
"""The Job was timed out"""
	TIMED_OUT
"""The Job was retried either automatically or by a user"""
	RETRIED
"""The Job was changed"""
	CHANGED
"""The Job was unblocked by a user"""
	UNBLOCKED
"""The Job was scheduled"""
	SCHEDULED
"""The Job sent a notification"""
	NOTIFICATION
"""The Job was marked for cancelation by a user"""
	CANCELATION
"""The Job is limited by a concurrency group"""
	LIMITED
"""The Job uploaded steps to the current build"""
	BUILD_STEP_UPLOAD_CREATED
"""The Job expired before it was started on an agent"""
	EXPIRED
}

"""The actor who was responsible for the job event"""
type JobEventActor {
"""The node corresponding to this actor if available"""
	node: JobEventActorNodeUnion
"""The type of this actor"""
	type: JobEventActorType!
"""The public UUID of this actor if available"""
	uuid: ID
}

"""All the actors that can have created a job event"""
enum JobEventActorType {
"""The actor was a user"""
	USER
"""The actor was an agent"""
	AGENT
"""The actor was the system"""
	SYSTEM
"""The actor was the dispatcher"""
	DISPATCH
}

"""Actor types that can create events on a job"""
union JobEventActorNodeUnion =User | Dispatch | Agent

"""A job dispatch for a particular Organization"""
type Dispatch {
	id: ID!
"""The public UUID for this organization dispatch"""
	uuid: String!
}

"""An agent"""
type Agent implements Node{
	clusterQueue: ClusterQueue
"""The time when the agent connected to Buildkite"""
	connectedAt: DateTime
"""The connection state of the agent"""
	connectionState: String!
"""The date the agent was created"""
	createdAt: DateTime
"""The time when the agent disconnected from Buildkite"""
	disconnectedAt: DateTime
"""The last time the agent performend a `heartbeat` operation to the Agent API"""
	heartbeatAt: DateTime
"""The hostname of the machine running the agent"""
	hostname: String
	id: ID!
"""The IP address that the agent has connected from"""
	ipAddress: String
"""If this version of agent has been deprecated by Buildkite"""
	isDeprecated: Boolean!
"""Returns whether or not this agent is running a job. If isRunningJob true, but the `job` field is empty, the current user doesn't have access to view the job"""
	isRunningJob: Boolean!
"""The currently running job"""
	job: Job
"""Jobs that have been assigned to this agent"""
	jobs(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
		type: [JobTypes!]
		state: [JobStates!]
		priority: Int
		agentQueryRules: [String!]
		concurrency: JobConcurrencySearch
"""Whether or not the command job passed. Passing `false` will return all failed jobs (including "soft failed" jobs)"""
		passed: Boolean
"""Filtering jobs based on related step information"""
		step: JobStepSearch
"""Order the jobs"""
		order: JobOrder
	): JobConnection
"""The date the agent was lost from Buildkite if it didn't cleanly disconnect"""
	lostAt: DateTime
"""The meta data this agent was stared with"""
	metaData: [String!]
"""The name of the agent"""
	name: String!
"""The operating system the agent is running on"""
	operatingSystem: OperatingSystem
	organization: Organization
	permissions: AgentPermissions!
"""The process identifier (PID) of the agent process on the machine"""
	pid: String
	pingedAt: DateTime
"""The priority setting for the agent"""
	priority: Int
"""Whether this agent is visible to everyone, including people outside this organization"""
	public: Boolean!
"""The time this agent was forced to stop"""
	stopForcedAt: DateTime
"""The user that forced this agent to stop"""
	stopForcedBy: User
"""The time the agent was first asked to stop"""
	stoppedAt: DateTime
"""The user that initially stopped this agent"""
	stoppedBy: User
"""The time the agent was gracefully stopped by a user"""
	stoppedGracefullyAt: DateTime
"""The user that gracefully stopped this agent"""
	stoppedGracefullyBy: User
"""The User-Agent of the program that is making Agent API requests to Buildkite"""
	userAgent: String
"""The public UUID for the agent"""
	uuid: String!
"""The version of the agent"""
	version: String
"""Whether this agent's version has known issues and should be upgraded"""
	versionHasKnownIssues: Boolean!
}

"""A operating system that an agent can run on"""
type OperatingSystem {
"""The name of the operating system"""
	name: String!
}

"""All the possible types of jobs that can exist"""
enum JobTypes {
"""A job that runs a command on an agent"""
	COMMAND
"""A job that waits for all previous jobs to finish"""
	WAIT
"""A job that blocks a pipeline from progressing until it's manually unblocked"""
	BLOCK
"""A job that triggers another build on a pipeline"""
	TRIGGER
}

"""Searching for concurrency groups on jobs"""
input JobConcurrencySearch {
"""Searching for concurrency groups on jobs"""
	group: [String!]
}

"""Searching for jobs based on step information"""
input JobStepSearch {
"""Searching for jobs based on step information"""
	key: [String!]
}

"""The diferent orders you can sort jobs by"""
enum JobOrder {
"""Order by the most recently assigned jobs first"""
	RECENTLY_ASSIGNED
"""Order by the most recently created jobs first"""
	RECENTLY_CREATED
}

"""Permissions information about what actions the current user can do against this agent"""
type AgentPermissions {
"""Whether the user can stop the agent remotely"""
	agentStop: Permission
}

"""The result of checking a permissions"""
type Permission {
	allowed: Boolean!
	code: String
	message: String
}

"""Concurrency configuration for a job"""
type JobConcurrency {
"""The concurrency group"""
	group: String!
"""The maximum amount of jobs in the concurrency that are allowed to run at any given time"""
	limit: Int!
}

type ArtifactConnection implements Connection{
	count: Int!
	edges: [ArtifactEdge]
	pageInfo: PageInfo
}

type ArtifactEdge {
	cursor: String!
	node: Artifact
}

"""A file uploaded from the agent whilst running a job"""
type Artifact implements Node{
"""The download URL for the artifact. Unless you've used your own artifact storage, the URL will be valid for only 10 minutes."""
	downloadURL: String!
"""The time when the artifact will, or did, expire"""
	expiresAt: DateTime
	id: ID!
"""The job that uploaded this artifact"""
	job: JobTypeCommand
"""The mime type of the file provided by the agent"""
	mimeType: String!
"""The path of the uploaded artifact"""
	path: String!
"""A SHA1SUM of the file"""
	sha1sum: String!
"""The size of the file in bytes that was uploaded"""
	size: Int!
"""The upload state of the artifact"""
	state: String!
"""The public UUID for this artifact"""
	uuid: ID!
}

"""A type of job that requires a user to unblock it before proceeding in a build pipeline"""
type JobTypeBlock implements Node{
"""The build that this job is a part of"""
	build: Build
	id: ID!
"""Whether or not this job can be unblocked yet (may be waiting on another job to finish)"""
	isUnblockable: Boolean
"""The label of this block step"""
	label: String
"""The state of the job"""
	state: JobStates!
"""The step that defined this job. Some older jobs in the system may not have an associated step"""
	step: StepInput
"""The time when the job was created"""
	unblockedAt: DateTime
"""The user that unblocked this job"""
	unblockedBy: User
"""The UUID for this job"""
	uuid: String!
}

"""An input step collects information from a user"""
type StepInput implements Step{
"""The conditional evaluated for this step"""
	conditional: String
"""Dependencies of this job"""
	dependencies(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
	): DependencyConnection
"""The user-defined key for this step"""
	key: String
"""The UUID for this step"""
	uuid: String!
}

"""A type of job that waits for all previous jobs to pass before proceeding the build pipeline"""
type JobTypeWait implements Node{
"""The build that this job is a part of"""
	build: Build
	id: ID!
"""The label of this wait step"""
	label: String
"""The state of the job"""
	state: JobStates!
"""The step that defined this job. Some older jobs in the system may not have an associated step"""
	step: StepWait
"""The UUID for this job"""
	uuid: String!
}

"""A wait step waits for all previous steps to have successfully completed before allowing following jobs to continue"""
type StepWait implements Step{
"""The conditional evaluated for this step"""
	conditional: String
"""Dependencies of this job"""
	dependencies(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
	): DependencyConnection
"""The user-defined key for this step"""
	key: String
"""The UUID for this step"""
	uuid: String!
}

"""A type of job that triggers another build on a pipeline"""
type JobTypeTrigger implements Node{
"""The build that this job is a part of"""
	build: Build
	id: ID!
"""The label of this trigger step"""
	label: String
"""The state of the job"""
	state: JobStates!
"""The step that defined this job. Some older jobs in the system may not have an associated step"""
	step: StepTrigger
"""The build that this job triggered"""
	triggered: Build
"""The UUID for this job"""
	uuid: String!
}

"""A trigger step creates a build on another pipeline"""
type StepTrigger implements Step{
"""The conditional evaluated for this step"""
	conditional: String
"""Dependencies of this job"""
	dependencies(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
	): DependencyConnection
"""The user-defined key for this step"""
	key: String
"""The UUID for this step"""
	uuid: String!
}

"""Search jobs by priority"""
input JobPrioritySearch {
"""Search jobs by priority"""
	number: [Int!]
}

"""A collection of TeamPipeline records"""
type TeamPipelineConnection implements Connection{
	count: Int!
	edges: [TeamPipelineEdge]
	pageInfo: PageInfo
}

type TeamPipelineEdge {
	cursor: String!
	node: TeamPipeline
}

"""An pipeline that's been assigned to a team"""
type TeamPipeline implements Node{
"""The access level users have to this pipeline"""
	accessLevel: PipelineAccessLevels!
"""The time when the pipeline was added"""
	createdAt: DateTime!
"""The user that added this pipeline to the team"""
	createdBy: User
	id: ID!
	permissions: TeamPipelinePermissions!
"""The pipeline associated with this team member"""
	pipeline: Pipeline
"""The team associated with this team member"""
	team: Team
"""The public UUID for this team member"""
	uuid: ID!
}

"""The access levels that can be assigned to a pipeline"""
enum PipelineAccessLevels {
"""Allows edits, builds and reads"""
	MANAGE_BUILD_AND_READ
"""Allows builds and read only"""
	BUILD_AND_READ
"""Read only - no builds or edits"""
	READ_ONLY
}

"""An organization team"""
type Team implements Node{
"""The time when this team was created"""
	createdAt: DateTime!
"""The user that created this team"""
	createdBy: User
"""New organization members will be granted this role on this team"""
	defaultMemberRole: TeamMemberRole!
"""A description of the team"""
	description: String
	id: ID!
"""Add new organization members to this team by default"""
	isDefaultTeam: Boolean!
"""Users that are part of this team"""
	members(
		first: Int
		after: String
		last: Int
		before: String
"""Search team members named like the given query case insensitively"""
		search: String
"""Search team members by their role"""
		role: [TeamMemberRole!]
"""Order the members returned"""
		order: TeamMemberOrder
	): TeamMemberConnection
"""Whether or not team members can create new pipelines in this team"""
	membersCanCreatePipelines: Boolean!
"""Whether or not team members can delete pipelines in this team"""
	membersCanDeletePipelines: Boolean!
"""The name of the team"""
	name: String!
"""The organization that this team is a part of"""
	organization: Organization
	permissions: TeamPermissions!
"""Pipelines associated with this team"""
	pipelines(
		first: Int
		after: String
		last: Int
		before: String
"""Search pipelines named like the given query case insensitively"""
		search: String
"""Order the pipelines returned"""
		order: TeamPipelineOrder
	): TeamPipelineConnection
"""The privacy setting for this team"""
	privacy: TeamPrivacy!
"""The slug of the team"""
	slug: String!
"""Suites associated with this team"""
	suites(
		first: Int
		after: String
		last: Int
		before: String
"""Order the suites returned"""
		order: TeamSuiteOrder
	): TeamSuiteConnection
"""The public UUID for this team"""
	uuid: ID!
}

"""Whether a team is visible or secret within an organization"""
enum TeamPrivacy {
"""Visible to all members of the organization"""
	VISIBLE
"""Visible to organization administrators and members"""
	SECRET
}

"""The roles a user can be within a team"""
enum TeamMemberRole {
"""The user is a regular member of the team"""
	MEMBER
"""The user can manage pipelines and users within the team"""
	MAINTAINER
}

"""The diferent orders you can sort pipelines by"""
enum TeamPipelineOrder {
"""Order by name alphabetically"""
	NAME
"""Order by most relevant results when doing a search"""
	RELEVANCE
"""Order by the most recently added pipelines first"""
	RECENTLY_CREATED
}

"""A collection of TeamSuite records"""
type TeamSuiteConnection implements Connection{
	count: Int!
	edges: [TeamSuiteEdge]
	pageInfo: PageInfo
}

type TeamSuiteEdge {
	cursor: String!
	node: TeamSuite
}

"""A suite that's been assigned to a team"""
type TeamSuite implements Node{
"""The access level users have to this suite"""
	accessLevel: SuiteAccessLevels!
"""The time when the suite was added"""
	createdAt: DateTime!
"""The user that added this suite to the team"""
	createdBy: User
	id: ID!
	permissions: TeamSuitePermissions!
"""The suite associated with this team member"""
	suite: Suite
"""The team associated with this team member"""
	team: Team
"""The public UUID for this team suite"""
	uuid: String!
}

"""The access levels that can be assigned to a suite"""
enum SuiteAccessLevels {
"""Allows edits and reads"""
	MANAGE_AND_READ
"""Read only"""
	READ_ONLY
}

"""A suite"""
type Suite implements Node{
"""The time when the suite was created"""
	createdAt: DateTime
"""The default branch for this suite"""
	defaultBranch: String
	id: ID!
"""The name of the suite"""
	name: String!
	organization: Organization!
"""The slug of the suite"""
	slug: String!
"""Teams associated with this suite"""
	teams(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
"""Search for teams associated that this suite is assigned to"""
		search: String
"""Order the suites returned"""
		order: TeamSuiteOrder
	): TeamSuiteConnection
"""The URL for the suite"""
	url: String!
	uuid: String!
}

"""The different orders you can sort suites by"""
enum TeamSuiteOrder {
"""Order by name alphabetically"""
	NAME
"""Order by most relevant results when doing a search"""
	RELEVANCE
"""Order by the most recently added suites first"""
	RECENTLY_CREATED
}

"""Permission information about what actions the current user can do against the team suites"""
type TeamSuitePermissions {
"""Whether the user can delete the suite from the team"""
	teamSuiteDelete: Permission
"""Whether the user can update the suite connection to the team"""
	teamSuiteUpdate: Permission
}

type TeamMemberConnection implements Connection{
	count: Int!
	edges: [TeamMemberEdge]
	pageInfo: PageInfo
}

type TeamMemberEdge {
	cursor: String!
	node: TeamMember
}

"""An member of a team"""
type TeamMember implements Node{
"""The time when the team member was added"""
	createdAt: DateTime!
"""The user that added this team member"""
	createdBy: User
	id: ID!
"""The organization member associated with this team member"""
	organizationMember: OrganizationMember
	permissions: TeamMemberPermissions!
"""The users role within the team"""
	role: TeamMemberRole!
"""The team associated with this team member"""
	team: Team
"""The user associated with this team member"""
	user: User
"""The public UUID for this team member"""
	uuid: ID!
}

"""A member of an organization"""
type OrganizationMember implements Node{
"""Whether or not organizations are required to pay for this user"""
	complimentary: Boolean!
"""The time when this user was added to the organization"""
	createdAt: DateTime!
"""The user that added invited this user"""
	createdBy: User
	id: ID!
	organization: Organization!
	permissions: OrganizationMemberPermissions!
"""Pipelines the user has access to within the organization"""
	pipelines(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
"""Search within the pipelines the user has access to"""
		search: String
"""Order the pipelines returned"""
		order: PipelineOrders
	): OrganizationMemberPipelineConnection!
"""The users role within the organization"""
	role: OrganizationMemberRole!
	security: OrganizationMemberSecurity!
	sso: OrganizationMemberSSO!
"""Suites the user has access to within the organization"""
	suites(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
"""Order the suites returned"""
		order: SuiteOrders
	): OrganizationMemberSuiteConnection!
"""Teams that this user is a part of within the organization"""
	teams(
		first: Int
		after: String
		last: Int
		before: String
"""Order the members returned"""
		order: TeamMemberOrder
	): TeamMemberConnection!
	user: User!
"""The public UUID for this organization member"""
	uuid: String!
}

"""The roles a user can be within an organization"""
enum OrganizationMemberRole {
"""The user is a regular member of the organization"""
	MEMBER
"""Has full access to the entire organization"""
	ADMIN
}

"""Information about the SSO setup for this organization member"""
type OrganizationMemberSSO {
"""SSO authorizations provided by your organization that have been created for this user"""
	authorizations(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
"""Filter authorizations by state"""
		state: [SSOAuthorizationState!]
	): SSOAuthorizationConnection
"""The SSO mode of the organization member"""
	mode: OrganizationMemberSSOModeEnum
}

"""The SSO authorization modes you can use on a member"""
enum OrganizationMemberSSOModeEnum {
"""The member must use SSO to access your organization"""
	REQUIRED
"""The member can either use SSO or their email & password"""
	OPTIONAL
}

type SSOAuthorizationConnection implements Connection{
	count: Int!
	edges: [SSOAuthorizationEdge]
	pageInfo: PageInfo
}

type SSOAuthorizationEdge {
	cursor: String!
	node: SSOAuthorization
}

type SSOAuthorization {
"""The time when this SSO Authorization was created"""
	createdAt: DateTime!
"""The time when this SSO Authorization was expired"""
	expiredAt: DateTime
	id: ID!
"""Details around the identity provided by the SSO provider"""
	identity: SSOAuthorizationIdentity
"""The time when this SSO Authorization was manually revoked"""
	revokedAt: DateTime
"""The SSO provider associated with this authorization"""
	ssoProvider: SSOProvider!
"""The current state of the SSO Authorization"""
	state: SSOAuthorizationState!
"""The user associated with this authorization"""
	user: User
"""The time when this SSO Authorization was destroyed because the user logged out"""
	userSessionDestroyedAt: DateTime
"""The public UUID for this SSO authorization"""
	uuid: String!
}

"""All the possible states an SSO Authorization"""
enum SSOAuthorizationState {
"""The authorization has been verified and is in use"""
	VERIFIED
"""The authorization was verified but has since been destroyed as the user logged out of that session"""
	VERIFIED_USER_SESSION_DESTROYED
"""The authorization was verified but has since been manually revoked"""
	VERIFIED_REVOKED
"""The authorization was verified but has since expired"""
	VERIFIED_EXPIRED
}

interface SSOProvider {
	createdAt: DateTime!
	createdBy: User!
	disabledAt: DateTime
	disabledBy: User
	disabledReason: String
	emailDomain: String
	emailDomainVerificationAddress: String
	emailDomainVerifiedAt: DateTime
	enabledAt: DateTime
	enabledBy: User
	id: ID!
	note: String
	organization: Organization
	sessionDurationInHours: Int
	state: SSOProviderStates!
	testAuthorizationRequired: Boolean
	type: SSOProviderTypes!
	url: String!
	uuid: ID!
}

"""All the possible states an SSO Provider can be in"""
enum SSOProviderStates {
"""The SSO Provider has been created, but has not been enabled for use yet"""
	CREATED
"""The SSO Provider has been setup correctly and can be used by users"""
	ENABLED
"""The SSO Provider has been disabled and can't be used directly"""
	DISABLED
}

"""All the possible SSO Provider types"""
enum SSOProviderTypes {
"""An SSO Provider configured to use SAML"""
	SAML
"""A SSO Provider configured to use Google G Suite for authorization"""
	GOOGLE_GSUITE
"""A SSO Provider configured to use a GitHub App for authorization"""
	GITHUB_APP
}

type SSOAuthorizationIdentity {
"""The avatar URL provided in this identity"""
	avatarURL: String
"""The email addresses provided in this identity"""
	email: String
"""The name provided in this identity"""
	name: String
"""The identifier provided in this identity"""
	uid: String
}

"""Information about what security settings the user has enabled in Buildkite"""
type OrganizationMemberSecurity {
"""If the user has secured their Buildkite user account with a password"""
	passwordProtected: Boolean!
"""If the user has enabled Two Factor Authentication"""
	twoFactorEnabled: Boolean!
}

type OrganizationMemberPipelineConnection implements Connection{
	count: Int!
	edges: [OrganizationMemberPipelineEdge]
	pageInfo: PageInfo
}

type OrganizationMemberPipelineEdge {
	cursor: String!
	node: OrganizationMemberPipeline
}

"""Represents the connection between a user an a pipeline within an organization"""
type OrganizationMemberPipeline {
"""The pipeline the user has access to within the organization"""
	pipeline: Pipeline!
}

"""The diferent orders you can sort pipelines by"""
enum PipelineOrders {
"""Order by name alphabetically"""
	NAME
"""Order by favorites first alphabetically, then the rest of the pipelines alphabetically"""
	NAME_WITH_FAVORITES_FIRST
"""Order by the most recently created pipelines first"""
	RECENTLY_CREATED
"""Order by relevance when searching for pipelines"""
	RELEVANCE
}

type OrganizationMemberSuiteConnection implements Connection{
	count: Int!
	edges: [OrganizationMemberSuiteEdge]
	pageInfo: PageInfo
}

type OrganizationMemberSuiteEdge {
	cursor: String!
	node: OrganizationMemberSuite
}

"""Represents the connection between a user an a suite within an organization"""
type OrganizationMemberSuite {
"""The suite the user has access to within the organization"""
	suite: Suite!
}

"""The diferent orders you can sort suites by"""
enum SuiteOrders {
"""Order by name alphabetically"""
	NAME
"""Order by the most recently created suites first"""
	RECENTLY_CREATED
"""Order by relevance when searching for suites"""
	RELEVANCE
}

"""The diferent orders you can sort team members by"""
enum TeamMemberOrder {
"""Order by name alphabetically"""
	NAME
"""Order by most relevant results when doing a search"""
	RELEVANCE
"""Order by the most recently added members first"""
	RECENTLY_CREATED
}

"""Permissions information about what actions the current user can do against the organization membership record"""
type OrganizationMemberPermissions {
"""Whether the user can delete the user from the organization"""
	organizationMemberDelete: Permission
"""Whether the user can update the organization's members role information"""
	organizationMemberUpdate: Permission
}

"""Permissions information about what actions the current user can do against the team membership record"""
type TeamMemberPermissions {
"""Whether the user can delete the user from the team"""
	teamMemberDelete: Permission
"""Whether the user can update the team's members admin status"""
	teamMemberUpdate: Permission
}

"""Permissions information about what actions the current user can do against the team"""
type TeamPermissions {
"""Whether the user can see the pipelines within the team"""
	pipelineView: Permission
"""Whether the user can delete the team"""
	teamDelete: Permission
"""Whether the user can administer add members from the organization to this team"""
	teamMemberCreate: Permission
"""Whether the user can add pipelines from other teams to this one"""
	teamPipelineCreate: Permission
"""Whether the user can add suites from other teams to this one"""
	teamSuiteCreate: Permission
"""Whether the user can update the team's name and description"""
	teamUpdate: Permission
}

"""Permission information about what actions the current user can do against the team pipelines"""
type TeamPipelinePermissions {
"""Whether the user can delete the pipeline from the team"""
	teamPipelineDelete: Permission
"""Whether the user can update the pipeline connection to the team"""
	teamPipelineUpdate: Permission
}

type PipelineMetricConnection implements Connection{
	count: Int!
	edges: [PipelineMetricEdge]
	pageInfo: PageInfo
}

type PipelineMetricEdge {
	cursor: String!
	node: PipelineMetric
}

"""A metric for a pipeline"""
type PipelineMetric implements Node{
	id: ID!
"""The label of this metric"""
	label: ID!
"""The URL for this metric"""
	url: String
"""The value for this metric"""
	value: String
}

type PipelineScheduleConnection implements Connection{
	count: Int!
	edges: [PipelineScheduleEdge]
	pageInfo: PageInfo
}

type PipelineScheduleEdge {
	cursor: String!
	node: PipelineSchedule
}

"""A schedule of when a build should automatically triggered for a Pipeline"""
type PipelineSchedule implements Node{
"""The branch to use for builds that this schedule triggers. Defaults to to the default branch in the Pipeline"""
	branch: String
"""Returns the builds created by this schedule"""
	builds(
"""Returns the first _n_ elements from the list."""
		first: Int
"""Returns the elements in the list that come after the specified cursor."""
		after: String
"""Returns the last _n_ elements from the list."""
		last: Int
"""Returns the elements in the list that come before the specified cursor."""
		before: String
	): BuildConnection
"""The commit to use for builds that this schedule triggers. Defaults to `HEAD`"""
	commit: String
"""The time when this schedule was created"""
	createdAt: DateTime
	createdBy: User
"""A definition of the trigger build schedule in cron syntax"""
	cronline: String!
"""If this Pipeline schedule is currently enabled"""
	enabled: Boolean
"""Environment variables passed to any triggered builds"""
	env: [String!]
"""The time when this schedule failed"""
	failedAt: DateTime
"""If the last attempt at triggering this scheduled build fails, this will be the reason"""
	failedMessage: String
	id: ID!
"""A short description of the Pipeline schedule"""
	label: String!
"""The message to use for builds that this schedule triggers"""
	message: String
"""The time when this schedule will create a build next"""
	nextBuildAt: DateTime
	permissions: PipelineSchedulePermissions!
	pipeline: Pipeline
"""The UUID of the Pipeline schedule"""
	uuid: String!
}

"""Permission information about what actions the current user can do against the pipeline schedule"""
type PipelineSchedulePermissions {
"""Whether the user can delete the schedule"""
	pipelineScheduleDelete: Permission
"""Whether the user can update the schedule"""
	pipelineScheduleUpdate: Permission
}

"""Permission information about what actions the current user can do against the pipeline"""
type PipelinePermissions {
"""Whether the user can create builds on this pipeline"""
	buildCreate: Permission!
"""Whether the user can delete this pipeline"""
	pipelineDelete: Permission!
"""Whether the user can favorite this pipeline"""
	pipelineFavorite: Permission!
"""Whether the user can create schedules on this pipeline"""
	pipelineScheduleCreate: Permission!
"""Whether the user can edit the settings of this pipeline"""
	pipelineUpdate: Permission!
}

"""Repository information for a pipeline"""
input PipelineRepositoryInput {
"""Repository information for a pipeline"""
	url: String!
}

"""A Team identifier using a slug, and optionally negated with a leading `!`"""
scalar TeamSelector

type SuiteConnection implements Connection{
	count: Int!
	edges: [SuiteEdge]
	pageInfo: PageInfo
}

type SuiteEdge {
	cursor: String!
	node: Suite
}

type AgentConnection implements Connection{
	count: Int!
	edges: [AgentEdge]
	pageInfo: PageInfo
}

type AgentEdge {
	cursor: String!
	node: Agent
}

type AgentTokenConnection implements Connection{
	count: Int!
	edges: [AgentTokenEdge]
	pageInfo: PageInfo
}

type AgentTokenEdge {
	cursor: String!
	node: AgentToken
}

"""A token used to connect an agent to Buildkite"""
type AgentToken implements Node{
"""The time this agent token was created"""
	createdAt: DateTime
"""The user that created this agent token"""
	createdBy: User
"""A description about what this agent token is used for"""
	description: String
	id: ID!
	organization: Organization
	permissions: AgentTokenPermissions!
"""Whether agents registered with this token will be visible to everyone, including people outside this organization"""
	public: Boolean!
"""The time this agent token was revoked"""
	revokedAt: DateTime
"""The user that revoked this agent token"""
	revokedBy: User
"""The reason as defined by the user why this token was revoked"""
	revokedReason: String
"""The name of the agent"""
	token: String!
"""The public UUID for the agent"""
	uuid: ID!
}

"""Permissions information about what actions the current user can do against the agent token"""
type AgentTokenPermissions {
"""Whether the user can revoke this agent token"""
	agentTokenRevoke: Permission
}

type ClusterConnection implements Connection{
	count: Int!
	edges: [ClusterEdge]
	pageInfo: PageInfo
}

type ClusterEdge {
	cursor: String!
	node: Cluster
}

"""The diferent orders you can sort clusters by"""
enum ClusterOrder {
"""Order by name alphabetically"""
	NAME
"""Order by the most recently created clusters first"""
	RECENTLY_CREATED
}

type TeamConnection implements Connection{
	count: Int!
	edges: [TeamEdge]
	pageInfo: PageInfo
}

type TeamEdge {
	cursor: String!
	node: Team
}

"""A Pipeline identifier using a slug, and optionally negated with a leading `!`"""
scalar PipelineSelector

"""A User identifier using a UUID, and optionally negated with a leading `!`"""
scalar UserSelector

"""The diferent orders you can sort teams by"""
enum TeamOrder {
"""Order by name alphabetically"""
	NAME
"""Order by the most recently created teams first"""
	RECENTLY_CREATED
"""Order by relevance when searching for teams"""
	RELEVANCE
}

type OrganizationMemberConnection implements Connection{
	count: Int!
	edges: [OrganizationMemberEdge]
	pageInfo: PageInfo
}

type OrganizationMemberEdge {
	cursor: String!
	node: OrganizationMember
}

input OrganizationMemberSecurityInput {
	twoFactorEnabled: Boolean
	passwordProtected: Boolean
}

input OrganizationMemberSSOInput {
	mode: OrganizationMemberSSOModeEnum!
}

"""The diferent orders you can sort members by"""
enum OrganizationMemberOrder {
"""Order by name alphabetically"""
	NAME
"""Order by the most recently created members first"""
	RECENTLY_CREATED
"""Order by relevance when searching for members"""
	RELEVANCE
}

type OrganizationInvitationConnection implements Connection{
	count: Int!
	edges: [OrganizationInvitationEdge]
	pageInfo: PageInfo
}

type OrganizationInvitationEdge {
	cursor: String!
	node: OrganizationInvitation
}

"""A pending invitation to a user to join this organization"""
type OrganizationInvitation implements Node{
"""The time when the invitation was accepted"""
	acceptedAt: DateTime
"""The user that accepted this invite"""
	acceptedBy: User
"""The time when the invitation was created"""
	createdAt: DateTime
"""The user that added invited this email address"""
	createdBy: User
"""The email address of this invitation"""
	email: String!
"""The time when the invitation was automatically expired"""
	expiredAt: DateTime
	id: ID!
	organization: Organization
	permissions: OrganizationInvitationPermissions!
"""The time when this invitation was revoked"""
	revokedAt: DateTime
"""The user that revoked this invitation"""
	revokedBy: User
"""The role the user will have in the organization once they've accepted the invitation"""
	role: OrganizationMemberRole!
"""The slug of the invitation that can be used to find an invitation in the query root"""
	slug: String!
	sso: OrganizationInvitationSSOType!
"""The current state of the invitation"""
	state: OrganizationInvitationStates!
"""Teams that have been assigned to this invitation"""
	teams(
"""Returns the first _n_ elements from the list."""
		first: Int
	): OrganizationInvitationTeamAssignmentConnection
"""The UUID of the invitation"""
	uuid: String!
}

"""All the possible states that an organization invitation can be"""
enum OrganizationInvitationStates {
"""The invitation is waiting for a user to accept it"""
	PENDING
"""The invitation was accepted by the person it was sent to"""
	ACCEPTED
"""The invitation wasn't accepted and the link has expired"""
	EXPIRED
"""The invitation was revoked and can no longer be accepted"""
	REVOKED
}

"""Information about the SSO setup for this invited organization member"""
type OrganizationInvitationSSOType {
"""The SSO mode of the invited organization member"""
	mode: OrganizationMemberSSOModeEnum
}

type OrganizationInvitationTeamAssignmentConnection implements Connection{
	count: Int!
	edges: [OrganizationInvitationTeamAssignmentEdge]
	pageInfo: PageInfo
}

type OrganizationInvitationTeamAssignmentEdge {
	cursor: String!
	node: OrganizationInvitationTeamAssignment
}

"""A team that has been assigned to an invitation"""
type OrganizationInvitationTeamAssignment {
	id: ID!
"""The role that the user will have once they've accepted the invite"""
	role: TeamMemberRole!
"""The team that this assignment refers to"""
	team: Team!
}

"""Permissions information about what actions the current user can do against this invitation"""
type OrganizationInvitationPermissions {
"""Whether the user can resend this invitation"""
	organizationInvitationResend: Permission
"""Whether the user can revoke this invitation"""
	organizationInvitationRevoke: Permission
}

"""The diferent orders you can sort organization invitations by"""
enum OrganizationInvitationOrders {
"""Order by email address alphabetically"""
	EMAIL
"""Order by the most recently created invitations first"""
	RECENTLY_CREATED
}

"""Permissions information about what actions the current user can do against the organization"""
type OrganizationPermissions {
"""Whether the user can create agent tokens"""
	agentTokenCreate: Permission
"""Whether the user can access agent tokens"""
	agentTokenView: Permission
"""Whether the user can create a see a list of agents in organization"""
	agentView: Permission
"""Whether the user can access audit events for the organization"""
	auditEventsView: Permission
"""Whether the user can change the notification services for the organization"""
	notificationServiceUpdate: Permission
"""Whether the user can view and manage billing for the organization"""
	organizationBillingUpdate: Permission
"""Whether the user can invite members from an organization"""
	organizationInvitationCreate: Permission
"""Whether the user can update/remove members from an organization"""
	organizationMemberUpdate: Permission
"""Whether the user can see members in the organization"""
	organizationMemberView: Permission
"""Whether the user can see sensitive information about members in the organization"""
	organizationMemberViewSensitive: Permission
"""Whether the user can change the organization name and related source code provider settings"""
	organizationUpdate: Permission
"""Whether the user can create a new pipeline in the organization"""
	pipelineCreate: Permission
"""Whether the user can create a new pipeline without adding it to any teams within the organization"""
	pipelineCreateWithoutTeams: Permission
"""Whether the user can create a see a list of pipelines in organization"""
	pipelineView: Permission
"""Whether the user can change SSO Providers for the organization"""
	ssoProviderCreate: Permission
"""Whether the user can change SSO Providers for the organization"""
	ssoProviderUpdate: Permission
"""Whether the user can create a see a list of suites in organization"""
	suiteView: Permission
"""Whether the user can administer one or all the teams in the organization"""
	teamAdmin: Permission
"""Whether the user can create teams for the organization"""
	teamCreate: Permission
"""Whether the user can toggle teams on/off for the organzation"""
	teamEnabledChange: Permission
"""Whether the user can see teams in the organization"""
	teamView: Permission
}

"""Single sign-on settings for an organization"""
type OrganizationSSO {
"""Whether this account is configured for single sign-on"""
	isEnabled: Boolean!
"""The single sign-on provider for this organization"""
	provider: OrganizationSSOProvider
}

"""Single sign-on provider information for an organization"""
type OrganizationSSOProvider {
	name: String!
}

type SSOProviderConnection implements Connection{
	count: Int!
	edges: [SSOProviderEdge]
	pageInfo: PageInfo
}

type SSOProviderEdge {
	cursor: String!
	node: SSOProvider
}

type OrganizationAuditEventConnection implements Connection{
	count: Int!
	edges: [OrganizationAuditEventEdge]
	pageInfo: PageInfo
}

type OrganizationAuditEventEdge {
	cursor: String!
	node: AuditEvent
}

"""Audit record of an event which occurred in the system"""
type AuditEvent implements Node{
"""The actor who caused this event"""
	actor: AuditActor
"""The context in which this event occurred"""
	context: AuditContext
"""The changed data in the event"""
	data: JSON
	id: ID!
"""The time at which this event occurred"""
	occurredAt: DateTime!
"""The subject of this event"""
	subject: AuditSubject
"""The type of event"""
	type: AuditEventType!
"""The public UUID for the event"""
	uuid: ID!
}

"""All the possible types of an Audit Event"""
enum AuditEventType {
	API_ACCESS_TOKEN_CREATED
	API_ACCESS_TOKEN_DELETED
	API_ACCESS_TOKEN_ORGANIZATION_ACCESS_REVOKED
	API_ACCESS_TOKEN_UPDATED
	AGENT_TOKEN_CREATED
	AGENT_TOKEN_REVOKED
	AUTHORIZATION_CREATED
	AUTHORIZATION_DELETED
	CLUSTER_CREATED
	CLUSTER_DELETED
	CLUSTER_PERMISSION_CREATED
	CLUSTER_PERMISSION_DELETED
	CLUSTER_PERMISSION_UPDATED
	CLUSTER_QUEUE_CREATED
	CLUSTER_QUEUE_DELETED
	CLUSTER_QUEUE_UPDATED
	CLUSTER_TOKEN_CREATED
	CLUSTER_TOKEN_DELETED
	CLUSTER_TOKEN_UPDATED
	CLUSTER_UPDATED
	NOTIFICATION_SERVICE_BROKEN
	NOTIFICATION_SERVICE_CREATED
	NOTIFICATION_SERVICE_DELETED
	NOTIFICATION_SERVICE_DISABLED
	NOTIFICATION_SERVICE_ENABLED
	NOTIFICATION_SERVICE_UPDATED
	ORGANIZATION_CREATED
	ORGANIZATION_DELETED
	ORGANIZATION_INVITATION_ACCEPTED
	ORGANIZATION_INVITATION_CREATED
	ORGANIZATION_INVITATION_RESENT
	ORGANIZATION_INVITATION_REVOKED
	ORGANIZATION_MEMBER_CREATED
	ORGANIZATION_MEMBER_DELETED
	ORGANIZATION_MEMBER_UPDATED
	ORGANIZATION_TEAMS_DISABLED
	ORGANIZATION_TEAMS_ENABLED
	ORGANIZATION_UPDATED
	PIPELINE_CREATED
	PIPELINE_DELETED
	PIPELINE_SCHEDULE_CREATED
	PIPELINE_SCHEDULE_DELETED
	PIPELINE_SCHEDULE_UPDATED
	PIPELINE_UPDATED
	PIPELINE_VISIBILITY_CHANGED
	PIPELINE_WEBHOOK_URL_ROTATED
	SCM_PIPELINE_SETTINGS_CREATED
	SCM_PIPELINE_SETTINGS_DELETED
	SCM_PIPELINE_SETTINGS_UPDATED
	SCM_SERVICE_CREATED
	SCM_SERVICE_DELETED
	SCM_SERVICE_UPDATED
	SSO_PROVIDER_CREATED
	SSO_PROVIDER_DELETED
	SSO_PROVIDER_DISABLED
	SSO_PROVIDER_ENABLED
	SSO_PROVIDER_UPDATED
	SUBSCRIPTION_PLAN_CHANGE_SCHEDULED
	SUBSCRIPTION_PLAN_CHANGED
	SUITE_API_TOKEN_REGENERATED
	SUITE_CREATED
	SUITE_DELETED
	SUITE_MONITOR_CREATED
	SUITE_MONITOR_DELETED
	SUITE_MONITOR_UPDATED
	SUITE_UPDATED
	TEAM_CREATED
	TEAM_DELETED
	TEAM_MEMBER_CREATED
	TEAM_MEMBER_DELETED
	TEAM_MEMBER_UPDATED
	TEAM_PIPELINE_CREATED
	TEAM_PIPELINE_DELETED
	TEAM_PIPELINE_UPDATED
	TEAM_SUITE_CREATED
	TEAM_SUITE_DELETED
	TEAM_SUITE_UPDATED
	TEAM_UPDATED
	USER_EMAIL_CREATED
	USER_EMAIL_DELETED
	USER_EMAIL_MARKED_PRIMARY
	USER_EMAIL_VERIFIED
	USER_PASSWORD_RESET
	USER_PASSWORD_RESET_REQUESTED
	USER_TOTP_ACTIVATED
	USER_TOTP_CREATED
	USER_TOTP_DELETED
	USER_UPDATED
}

"""The actor who caused an AuditEvent"""
type AuditActor {
"""The GraphQL ID for this actor"""
	id: ID!
"""The name or short description of this actor"""
	name: String
"""The node corresponding to this actor, if available"""
	node: AuditActorNode
"""The type of this actor"""
	type: AuditActorType
"""The public UUID of this actor"""
	uuid: ID!
}

"""All the possible types of actors in an Audit Event"""
enum AuditActorType {
	USER
}

"""Kinds of actors which can perform audit events"""
union AuditActorNode =User

"""The subject of an AuditEvent"""
type AuditSubject {
"""The GraphQL ID for the subject"""
	id: ID!
"""The name or short description of this subject"""
	name: String
"""The node corresponding to the subject, if available"""
	node: AuditSubjectNode
"""The type of this subject"""
	type: AuditSubjectType
"""The public UUID of this subject"""
	uuid: ID!
}

"""All the possible types of subjects in an Audit Event"""
enum AuditSubjectType {
	AUTHORIZATION
	AGENT_TOKEN
	API_ACCESS_TOKEN
	CLUSTER
	CLUSTER_QUEUE
	CLUSTER_TOKEN
	NOTIFICATION_SERVICE
	ORGANIZATION
	ORGANIZATION_INVITATION
	PIPELINE_SCHEDULE
	TEAM
	TEAM_MEMBER
	TEAM_PIPELINE
	TEAM_SUITE
	PIPELINE
	SCM_SERVICE
	SUITE
	SUITE_MONITOR
	SCM_PIPELINE_SETTINGS
	USER_EMAIL
	USER_TOTP
	SUBSCRIPTION
	CLUSTER_PERMISSION
	ORGANIZATION_MEMBER
	USER
	SSO_PROVIDER
}

"""Kinds of subjects which can have audit events performed on them"""
union AuditSubjectNode =AuthorizationBitbucket | AuthorizationGitHubEnterprise | AuthorizationGitHub | AgentToken | APIAccessToken | Cluster | ClusterQueue | ClusterToken | NotificationServiceSlack | NotificationServiceWebhook | Organization | OrganizationInvitation | PipelineSchedule | Team | TeamMember | TeamPipeline | TeamSuite | Pipeline | SCMService | Suite | SuiteMonitor | SCMPipelineSettings | Email | TOTP | Subscription | ClusterPermission | OrganizationMember | User | SSOProviderGoogleGSuite | SSOProviderGitHubApp | SSOProviderSAML

"""A Bitbucket account authorized with a Buildkite account"""
type AuthorizationBitbucket implements Authorization & Node{
	id: ID!
}

interface Authorization {
	id: ID!
}

"""A GitHub Enterprise account authorized with a Buildkite account"""
type AuthorizationGitHubEnterprise implements Authorization & Node{
	id: ID!
}

"""A GitHub account authorized with a Buildkite account"""
type AuthorizationGitHub implements Authorization & Node{
	id: ID!
}

"""API access tokens for authentication with the Buildkite API"""
type APIAccessToken implements Node{
	id: ID!
"""The public UUID for the API Access Token"""
	uuid: ID!
}

"""Deliver notifications to Slack"""
type NotificationServiceSlack implements Node & NotificationService{
"""The description of this service"""
	description: String!
	id: ID!
"""The name of the service provider"""
	name: String!
}

interface NotificationService {
	description: String!
	id: ID!
	name: String!
}

"""Deliver notifications to a custom URL"""
type NotificationServiceWebhook implements NotificationService{
"""The description of this service"""
	description: String!
	id: ID!
"""The name of the service provider"""
	name: String!
}

type SCMService {
	id: ID!
}

"""A test suite monitor"""
type SuiteMonitor implements Node{
	id: ID!
"""The public UUID for this suite monitor"""
	uuid: ID!
}

type SCMPipelineSettings {
	id: ID!
}

"""An email address"""
type Email implements Node{
"""The email address"""
	address: String!
	id: ID!
"""Whether the email address is the user's primary address"""
	primary: Boolean!
"""The public UUID for this email"""
	uuid: ID!
"""Whether the email address has been verified by the user"""
	verified: Boolean!
}

"""A TOTP configuration"""
type TOTP {
	id: ID!
"""The recovery code batch associated with this TOTP configuration"""
	recoveryCodes: RecoveryCodeBatch!
"""Whether the TOTP configuration has been verified yet"""
	verified: Boolean!
}

"""A batch of recovery codes"""
type RecoveryCodeBatch {
"""Whether the batch of recovery codes is active"""
	active: Boolean!
"""The recovery codes from this batch. Codes are consumed when used, and codes will be included in this list whether consumed or not"""
	codes: [RecoveryCode!]!
	id: ID!
}

"""A recovery code"""
type RecoveryCode {
"""The recovery code."""
	code: String!
"""Whether the recovery codes is used"""
	consumed: Boolean!
"""Foo"""
	consumedAt: String
}

type Subscription {
	id: ID!
}

type ClusterPermission {
	actor: ClusterPermissionActor
"""Whether the actor can add pipelines to this cluster"""
	can_add_pipelines: Boolean!
"""Whether the actor can manage the associated cluster"""
	can_manage: Boolean!
"""Whether the actor can see this cluster's tokens"""
	can_see_tokens: Boolean!
	cluster: Cluster
	id: ID!
"""The public UUID for this cluster permission"""
	uuid: ID!
}

"""Actor to whom a cluster permission is applied"""
union ClusterPermissionActor =OrganizationMember | Team

"""Single sign-on provided by Google"""
type SSOProviderGoogleGSuite implements Node & SSOProvider{
"""The time when this SSO Provider was created"""
	createdAt: DateTime!
"""The user that created this SSO Provider"""
	createdBy: User!
"""The time when this SSO Provider was disabled"""
	disabledAt: DateTime
"""The user that disabled this SSO Provider"""
	disabledBy: User
"""The reason this SSO Provider was disabled"""
	disabledReason: String
"""Whether or not the hosted domain should be presented to the user during SSO"""
	discloseGoogleHostedDomain: Boolean!
"""An email domain whose addresses should be offered this SSO Provider during login."""
	emailDomain: String
	emailDomainVerificationAddress: String
	emailDomainVerifiedAt: DateTime
"""The time when this SSO Provider was enabled"""
	enabledAt: DateTime
"""The user that enabled this SSO Provider"""
	enabledBy: User
"""The Google hosted domain that is required to be present in oAuth"""
	googleHostedDomain: String!
	id: ID!
"""An extra message that can be added the Authorization screen of an SSO Provider"""
	note: String
	organization: Organization
"""How long a session should last before requring re-authorization. A `null` value indicates an infinite session."""
	sessionDurationInHours: Int
"""The current state of the SSO Provider"""
	state: SSOProviderStates!
"""Whether the SSO Provider requires a test authorization. If true, the provider can not yet be activated."""
	testAuthorizationRequired: Boolean
"""The type of SSO Provider"""
	type: SSOProviderTypes!
"""The authorization URL for this SSO Provider"""
	url: String!
"""The UUID for this SSO Provider"""
	uuid: ID!
}

"""Single sign-on provided by GitHub"""
type SSOProviderGitHubApp implements Node & SSOProvider{
"""The time when this SSO Provider was created"""
	createdAt: DateTime!
"""The user that created this SSO Provider"""
	createdBy: User!
"""The time when this SSO Provider was disabled"""
	disabledAt: DateTime
"""The user that disabled this SSO Provider"""
	disabledBy: User
"""The reason this SSO Provider was disabled"""
	disabledReason: String
"""An email domain whose addresses should be offered this SSO Provider during login."""
	emailDomain: String
	emailDomainVerificationAddress: String
	emailDomainVerifiedAt: DateTime
"""The time when this SSO Provider was enabled"""
	enabledAt: DateTime
"""The user that enabled this SSO Provider"""
	enabledBy: User
"""The name of the organization on GitHub that the user must be in for an SSO authorization to be verified"""
	githubOrganizationName: String!
	id: ID!
"""An extra message that can be added the Authorization screen of an SSO Provider"""
	note: String
	organization: Organization
"""How long a session should last before requring re-authorization. A `null` value indicates an infinite session."""
	sessionDurationInHours: Int
"""The current state of the SSO Provider"""
	state: SSOProviderStates!
"""Whether the SSO Provider requires a test authorization. If true, the provider can not yet be activated."""
	testAuthorizationRequired: Boolean
"""The type of SSO Provider"""
	type: SSOProviderTypes!
"""The authorization URL for this SSO Provider"""
	url: String!
"""The UUID for this SSO Provider"""
	uuid: ID!
}

"""Single sign-on provided via SAML"""
type SSOProviderSAML implements Node & SSOProvider{
"""The time when this SSO Provider was created"""
	createdAt: DateTime!
"""The user that created this SSO Provider"""
	createdBy: User!
"""The algorithim used to calculate the digest value during a SAML exchange"""
	digestMethod: SSOProviderSAMLXMLSecurity!
"""The time when this SSO Provider was disabled"""
	disabledAt: DateTime
"""The user that disabled this SSO Provider"""
	disabledBy: User
"""The reason this SSO Provider was disabled"""
	disabledReason: String
"""An email domain whose addresses should be offered this SSO Provider during login."""
	emailDomain: String
	emailDomainVerificationAddress: String
	emailDomainVerifiedAt: DateTime
"""The time when this SSO Provider was enabled"""
	enabledAt: DateTime
"""The user that enabled this SSO Provider"""
	enabledBy: User
	id: ID!
"""Information about the IdP"""
	identityProvider: SSOProviderSAMLIdPType
"""An extra message that can be added the Authorization screen of an SSO Provider"""
	note: String
	organization: Organization
	serviceProvider: SSOProviderSAMLSPType!
"""How long a session should last before requring re-authorization. A `null` value indicates an infinite session."""
	sessionDurationInHours: Int
"""The algorithim used to calculate the signature value during a SAML exchange"""
	signatureMethod: SSOProviderSAMLRSAXMLSecurity!
"""The current state of the SSO Provider"""
	state: SSOProviderStates!
"""Whether the SSO Provider requires a test authorization. If true, the provider can not yet be activated."""
	testAuthorizationRequired: Boolean
"""The type of SSO Provider"""
	type: SSOProviderTypes!
"""The authorization URL for this SSO Provider"""
	url: String!
"""The UUID for this SSO Provider"""
	uuid: ID!
}

"""Information about the IdP for a SAML SSO Provider"""
type SSOProviderSAMLIdPType {
"""The certificated provided by the IdP"""
	certificate: String
"""The IdP Issuer value for this SSO Provider"""
	issuer: String
"""The metadata used to configure this SSO provider if it was provided"""
	metadata: SSOProviderSAMLMetadataType
"""The name of the IdP Service. Returns nil if no name can be guessed from the SSO URL"""
	name: String
"""The Idp SSO URL for this SSO Provider"""
	ssoURL: String
}

"""SAML metadata used for configuration"""
type SSOProviderSAMLMetadataType {
"""The URL that this metadata can be publicly accessed at"""
	url: String
"""The XML for this metadata"""
	xml: XML
}

"""A blob of XML represented as a pretty formatted string"""
scalar XML

"""Information about Buildkite as a SAML Service Provider"""
type SSOProviderSAMLSPType {
"""The IdP Issuer value for this SSO Provider"""
	issuer: String
"""The metadata used to configure this SSO provider if it was provided"""
	metadata: SSOProviderSAMLMetadataType
"""The Idp SSO URL for this SSO Provider"""
	ssoURL: String
}

"""XML security algorithims used in the SAML exchange"""
enum SSOProviderSAMLXMLSecurity {
"""http://www.w3.org/2000/09/xmldsig#sha1"""
	SHA1
"""http://www.w3.org/2001/04/xmlenc#sha256"""
	SHA256
"""http://www.w3.org/2001/04/xmldsig-more#sha384"""
	SHA384
"""http://www.w3.org/2001/04/xmlenc#sha512"""
	SHA512
}

"""XML RSA security algorithims used in the SAML exchange"""
enum SSOProviderSAMLRSAXMLSecurity {
"""http://www.w3.org/2000/09/xmldsig#rsa-sha1"""
	RSA_SHA1
"""http://www.w3.org/2001/04/xmldsig-more#rsa-sha256"""
	RSA_SHA256
"""http://www.w3.org/2001/04/xmldsig-more#rsa-sha384"""
	RSA_SHA384
"""http://www.w3.org/2001/04/xmldsig-more#rsa-sha512"""
	RSA_SHA512
}

"""Kinds of contexts in which an audit event can be performed"""
union AuditContext =AuditWebContext | AuditAPIContext

"""Context for an audit event created during a web request"""
type AuditWebContext {
"""The remote IP which made the request"""
	requestIpAddress: String
"""The client supplied user agent which made the request"""
	requestUserAgent: String
"""When the session started, if available"""
	sessionCreatedAt: DateTime
"""When the session was escalated, if available and escalated"""
	sessionEscalatedAt: DateTime
"""The session's authenticated user, if available"""
	sessionUser: User
"""The session's authenticated user's uuid"""
	sessionUserUuid: ID
}

"""Context for an audit event created during an REST/GraphQL API request"""
type AuditAPIContext {
"""The remote IP which made the request"""
	requestIpAddress: String
"""The client supplied user agent which made the request"""
	requestUserAgent: String
}

"""The diferent orders you can sort audit events by"""
enum OrganizationAuditEventOrders {
"""Order by the most recently occurring events first"""
	RECENTLY_OCCURRED
}

type AnnotationConnection implements Connection{
	count: Int!
	edges: [AnnotationEdge]
	pageInfo: PageInfo
}

type AnnotationEdge {
	cursor: String!
	node: Annotation
}

"""An annotation allows you to add arbitary content to the top of a build page in the Buildkite UI"""
type Annotation implements Node{
"""The body of the annotation"""
	body: AnnotationBody
"""The context of the annotation that helps you differentiate this one from others"""
	context: String!
"""The date the annotation was created"""
	createdAt: DateTime!
	id: ID!
"""The visual style of the annotation"""
	style: AnnotationStyle
"""The last time the annotation was changed"""
	updatedAt: DateTime
"""The public UUID for this annotation"""
	uuid: ID!
}

"""The visual style of the annoation"""
enum AnnotationStyle {
"""The default styling of an annotation"""
	DEFAULT
"""The annotation has a green border with a tick next to it"""
	SUCCESS
"""The annotation has a blue border with an information icon next to it"""
	INFO
"""The annotation has an orange border with a warning icon next to it"""
	WARNING
""" The annotation has a red border with a cross next to it"""
	ERROR
}

"""A body of an annotation"""
type AnnotationBody {
"""The body of the annotation rendered as HTML. The renderer result could be an empty string if the textual version has unsupported HTML tags"""
	html: String
"""The body of the annotation as text"""
	text: String!
}

type BuildMetaDataConnection implements Connection{
	count: Int!
	edges: [BuildMetaDataEdge]
	pageInfo: PageInfo
}

type BuildMetaDataEdge {
	cursor: String!
	node: BuildMetaData
}

"""A comment on a build"""
type BuildMetaData {
"""The key used to set this meta data"""
	key: String!
"""The value set to this meta data"""
	value: String!
}

"""Permissions information about what actions the current user can do"""
type ViewerPermissions {
"""Whether the viewer can configure two-factor authentication"""
	totpConfigure: Permission!
}

type EmailConnection implements Connection{
	count: Int!
	edges: [EmailEdge]
	pageInfo: PageInfo
}

type EmailEdge {
	cursor: String!
	node: Email
}

type OrganizationConnection implements Connection{
	count: Int!
	edges: [OrganizationEdge]
	pageInfo: PageInfo
}

type OrganizationEdge {
	cursor: String!
	node: Organization
}

type AuthorizationConnection implements Connection{
	count: Int!
	edges: [AuthorizationEdge]
	pageInfo: PageInfo
}

type AuthorizationEdge {
	cursor: String!
	node: Authorization
}

"""The type of the authorization"""
enum AuthorizationType {
"""GitHub Authorization"""
	GITHUB
"""GitHub Enterprise Authorization"""
	GITHUB_ENTERPRISE
"""Bitbucket Authorization"""
	BITBUCKET
}

"""A notice or notice that a user sees in the Buildkite UI"""
type Notice {
"""The time when this notice was dismissed from the UI"""
	dismissedAt: DateTime
	id: ID!
"""The namespace of this notice"""
	namespace: NoticeNamespaces!
"""The scope within the namespace"""
	scope: String!
}

"""All the possible namespaces for a notice"""
enum NoticeNamespaces {
"""A change to an existing feature"""
	CHANGE
"""The user has had an email suggested to them"""
	EMAIL_SUGGESTION
"""A new feature was added"""
	FEATURE
"""An event announcement"""
	EVENT
}

type ChangelogConnection implements Connection{
	count: Int!
	edges: [ChangelogEdge]
	pageInfo: PageInfo
}

type ChangelogEdge {
	cursor: String!
	node: Changelog
}

"""A changelog"""
type Changelog implements Node{
	author: ChangelogAuthor
"""The body of this changelog"""
	body: String
	id: ID!
"""The date and time this changelog was published"""
	publishedAt: DateTime
"""The tag for this changelog"""
	tag: String!
"""The title for this changelog"""
	title: String!
"""The public UUID for this changelog"""
	uuid: String!
}

"""The author of the changelog"""
type ChangelogAuthor {
	avatar: Avatar!
"""The name of the author"""
	name: String!
}

"""A code that is used by an API Application to request an API Access Token"""
type APIAccessTokenCode implements Node{
	application: APIApplication
"""The time when this code was authorized by a user"""
	authorizedAt: DateTime
"""The IP address of the client that authorized this code"""
	authorizedIPAddress: String
"""The actual code used to find this API Access Token Code record"""
	code: String!
"""The description of the code provided by the API Application"""
	description: String!
"""The time when this code will expire"""
	expiresAt: DateTime!
	id: ID!
}

"""An API Application"""
type APIApplication implements Node{
"""A description of the application"""
	description: String!
	id: ID!
"""The name of this application"""
	name: String!
}

"""A shared GraphQL query"""
type GraphQLSnippet {
"""When this GraphQL snippet was created"""
	createdAt: DateTime!
	id: ID!
"""The default operation name for this snippet"""
	operationName: String
"""The query of this GraphQL snippet"""
	query: String!
"""The URL for the GraphQL snippet"""
	url: String!
"""The public UUID for this snippet"""
	uuid: ID!
}

"""The root for mutations in this schema"""
type Mutation {
"""Instruct an agent to stop accepting new build jobs and shut itself down."""
	agentStop(
		input: AgentStopInput!
	): AgentStopPayload
"""Create a new agent registration token."""
	agentTokenCreate(
		input: AgentTokenCreateInput!
	): AgentTokenCreatePayload
"""Revoke an agent registration token."""
	agentTokenRevoke(
		input: AgentTokenRevokeInput!
	): AgentTokenRevokePayload
"""Authorize an API Access Token Code generated by an API Application. Please note this mutation is private and cannot be executed externally."""
	apiAccessTokenCodeAuthorize(
		input: APIAccessTokenCodeAuthorizeMutationInput!
	): APIAccessTokenCodeAuthorizeMutationPayload
"""Annotate a build with information to appear on the build page."""
	buildAnnotate(
		input: BuildAnnotateInput!
	): BuildAnnotatePayload
"""Cancel a build."""
	buildCancel(
		input: BuildCancelInput!
	): BuildCancelPayload
"""Create a build."""
	buildCreate(
		input: BuildCreateInput!
	): BuildCreatePayload
"""Rebuild a build."""
	buildRebuild(
		input: BuildRebuildInput!
	): BuildRebuildPayload
"""Add a new email address for the current user"""
	emailCreate(
		input: EmailCreateInput!
	): EmailCreatePayload
"""Resend a verification email."""
	emailResendVerification(
		input: EmailResendVerificationInput!
	): EmailResendVerificationPayload
"""Create a GraphQL snippet."""
	graphQLSnippetCreate(
		input: GraphQLSnippetCreateInput!
	): GraphQLSnippetCreatePayload
"""Unblocks a build's "Block pipeline" job."""
	jobTypeBlockUnblock(
		input: JobTypeBlockUnblockInput!
	): JobTypeBlockUnblockPayload
"""Cancel a job."""
	jobTypeCommandCancel(
		input: JobTypeCommandCancelInput!
	): JobTypeCommandCancelPayload
"""Retry a job."""
	jobTypeCommandRetry(
		input: JobTypeCommandRetryInput!
	): JobTypeCommandRetryPayload
"""Dismisses a notice from the Buildkite UI. This mutation is idempotent so if you dismiss the same notice multiple times, it will return the original `dismissedAt` time"""
	noticeDismiss(
		input: NoticeDismissInput!
	): NoticeDismissPayload
"""Send email invitations to this organization."""
	organizationInvitationCreate(
		input: OrganizationInvitationCreateInput!
	): OrganizationInvitationCreatePayload
"""Resend an organization invitation email."""
	organizationInvitationResend(
		input: OrganizationInvitationResendInput!
	): OrganizationInvitationResendPayload
"""Revoke an invitation to an organization so that it can no longer be accepted."""
	organizationInvitationRevoke(
		input: OrganizationInvitationRevokeInput!
	): OrganizationInvitationRevokePayload
"""Remove a user from an organization."""
	organizationMemberDelete(
		input: OrganizationMemberDeleteInput!
	): OrganizationMemberDeletePayload
"""Change a user's role within an organization."""
	organizationMemberUpdate(
		input: OrganizationMemberUpdateInput!
	): OrganizationMemberUpdatePayload
"""Archive a pipeline."""
	pipelineArchive(
		input: PipelineArchiveInput!
	): PipelineArchivePayload
"""Create a pipeline."""
	pipelineCreate(
		input: PipelineCreateInput!
	): PipelineCreatePayload
"""Create SCM webhooks for a pipeline."""
	pipelineCreateWebhook(
		input: PipelineCreateWebhookInput!
	): PipelineCreateWebhookPayload
"""Delete a pipeline."""
	pipelineDelete(
		input: PipelineDeleteInput!
	): PipelineDeletePayload
"""Favorite a pipeline."""
	pipelineFavorite(
		input: PipelineFavoriteInput!
	): PipelineFavoritePayload
"""Rotate a pipeline's webhook URL.

Note that the old webhook URL will stop working immediately and so must be updated quickly to avoid interruption.
"""
	pipelineRotateWebhookURL(
		input: PipelineRotateWebhookURLInput!
	): PipelineRotateWebhookURLPayload
"""Create a scheduled build on pipeline."""
	pipelineScheduleCreate(
		input: PipelineScheduleCreateInput!
	): PipelineScheduleCreatePayload
"""Delete a scheduled build on pipeline."""
	pipelineScheduleDelete(
		input: PipelineScheduleDeleteInput!
	): PipelineScheduleDeletePayload
"""Update a scheduled build on pipeline."""
	pipelineScheduleUpdate(
		input: PipelineScheduleUpdateInput!
	): PipelineScheduleUpdatePayload
"""Unarchive a pipeline."""
	pipelineUnarchive(
		input: PipelineUnarchiveInput!
	): PipelineUnarchivePayload
"""Change the settings for a pipeline."""
	pipelineUpdate(
		input: PipelineUpdateInput!
	): PipelineUpdatePayload
"""Create a SSO provider."""
	ssoProviderCreate(
		input: SSOProviderCreateInput!
	): SSOProviderCreatePayload
"""Delete a SSO provider."""
	ssoProviderDelete(
		input: SSOProviderDeleteInput!
	): SSOProviderDeletePayload
"""Disable a SSO provider."""
	ssoProviderDisable(
		input: SSOProviderDisableInput!
	): SSOProviderDisablePayload
"""Enable a SSO provider."""
	ssoProviderEnable(
		input: SSOProviderEnableInput!
	): SSOProviderEnablePayload
"""Change the settings for a SSO provider."""
	ssoProviderUpdate(
		input: SSOProviderUpdateInput!
	): SSOProviderUpdatePayload
"""Create a team."""
	teamCreate(
		input: TeamCreateInput!
	): TeamCreatePayload
"""Delete a team."""
	teamDelete(
		input: TeamDeleteInput!
	): TeamDeletePayload
"""Add a user to a team."""
	teamMemberCreate(
		input: TeamMemberCreateInput!
	): TeamMemberCreatePayload
"""Remove a user from a team."""
	teamMemberDelete(
		input: TeamMemberDeleteInput!
	): TeamMemberDeletePayload
"""Update a user's role in a team."""
	teamMemberUpdate(
		input: TeamMemberUpdateInput!
	): TeamMemberUpdatePayload
"""Add a pipeline to a team."""
	teamPipelineCreate(
		input: TeamPipelineCreateInput!
	): TeamPipelineCreatePayload
"""Remove a pipeline from a team."""
	teamPipelineDelete(
		input: TeamPipelineDeleteInput!
	): TeamPipelineDeletePayload
"""Update a pipeline's access level within a team."""
	teamPipelineUpdate(
		input: TeamPipelineUpdateInput!
	): TeamPipelineUpdatePayload
"""Add a suite to a team."""
	teamSuiteCreate(
		input: TeamSuiteCreateInput!
	): TeamSuiteCreatePayload
"""Remove a suite from a team."""
	teamSuiteDelete(
		input: TeamSuiteDeleteInput!
	): TeamSuiteDeletePayload
"""Update a suite's access level within a team."""
	teamSuiteUpdate(
		input: TeamSuiteUpdateInput!
	): TeamSuiteUpdatePayload
"""Change the settings for a team."""
	teamUpdate(
		input: TeamUpdateInput!
	): TeamUpdatePayload
"""Activate a previously-generated TOTP configuration, and its Recovery Codes.

Once activated, both this TOTP configuration, and the associated Recovery Codes will become active for the user.
Any previous TOTP configuration or Recovery Codes will no longer be usable.

This mutation is private, requires an escalated session, and cannot be accessed via the public GraphQL API.
"""
	totpActivate(
		input: TOTPActivateInput!
	): TOTPActivatePayload
"""Create a new TOTP configuration for the current user.

This will produce a TOTP configuration with an associated set of Recovery Codes. The Recovery Codes must be presented to the user prior to the TOTP's activation with `totpActivate`.
Neither TOTP configuration nor Recovery Codes will be usable until they have been activated.

This mutation is private, requires an escalated session, and cannot be accessed via the public GraphQL API.
"""
	totpCreate(
		input: TOTPCreateInput!
	): TOTPCreatePayload
"""Delete a TOTP configuration.

If a TOTP configuration was active, it will no longer be used for logging on to the user's account.
Any Recovery Codes associated with the TOTP configuration will also no longer be usable.

This mutation is private, requires an escalated session, and cannot be accessed via the public GraphQL API.
"""
	totpDelete(
		input: TOTPDeleteInput!
	): TOTPDeletePayload
"""Generate a new set of Recovery Codes for a given TOTP.

The new Recovery Codes will immediately replace any existing recovery codes.

This mutation is private, requires an escalated session, and cannot be accessed via the public GraphQL API.
"""
	totpRecoveryCodesRegenerate(
		input: TOTPRecoveryCodesRegenerateInput!
	): TOTPRecoveryCodesRegeneratePayload
}

"""Autogenerated return type of AgentStop"""
type AgentStopPayload {
	agent: Agent!
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
}

"""Autogenerated input type of AgentStop"""
input AgentStopInput {
"""Autogenerated input type of AgentStop"""
	clientMutationId: String
"""Autogenerated input type of AgentStop"""
	id: ID!
"""Autogenerated input type of AgentStop"""
	graceful: Boolean
}

"""Autogenerated return type of AgentTokenCreate"""
type AgentTokenCreatePayload {
	agentTokenEdge: AgentTokenEdge!
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	organization: Organization!
}

"""Autogenerated input type of AgentTokenCreate"""
input AgentTokenCreateInput {
"""Autogenerated input type of AgentTokenCreate"""
	clientMutationId: String
"""Autogenerated input type of AgentTokenCreate"""
	organizationID: ID!
"""Autogenerated input type of AgentTokenCreate"""
	description: String
"""Autogenerated input type of AgentTokenCreate"""
	public: Boolean
}

"""Autogenerated return type of AgentTokenRevoke"""
type AgentTokenRevokePayload {
	agentToken: AgentToken!
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
}

"""Autogenerated input type of AgentTokenRevoke"""
input AgentTokenRevokeInput {
"""Autogenerated input type of AgentTokenRevoke"""
	clientMutationId: String
"""Autogenerated input type of AgentTokenRevoke"""
	id: ID!
"""Autogenerated input type of AgentTokenRevoke"""
	reason: String!
}

"""Autogenerated return type of APIAccessTokenCodeAuthorizeMutation"""
type APIAccessTokenCodeAuthorizeMutationPayload {
	apiAccessTokenCode: APIAccessTokenCode!
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
}

"""Autogenerated input type of APIAccessTokenCodeAuthorizeMutation"""
input APIAccessTokenCodeAuthorizeMutationInput {
"""Autogenerated input type of APIAccessTokenCodeAuthorizeMutation"""
	clientMutationId: String
"""Autogenerated input type of APIAccessTokenCodeAuthorizeMutation"""
	id: ID!
}

"""Autogenerated return type of BuildCreate"""
type BuildCreatePayload {
	build: Build
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
}

"""Autogenerated input type of BuildCreate"""
input BuildCreateInput {
"""Autogenerated input type of BuildCreate"""
	clientMutationId: String
"""Autogenerated input type of BuildCreate"""
	pipelineID: ID!
"""Autogenerated input type of BuildCreate"""
	message: String
"""Autogenerated input type of BuildCreate"""
	commit: String
"""Autogenerated input type of BuildCreate"""
	branch: String
"""Autogenerated input type of BuildCreate"""
	env: [String!]
"""Autogenerated input type of BuildCreate"""
	metaData: [BuildMetaDataInput!]
"""Autogenerated input type of BuildCreate"""
	author: BuildAuthorInput
}

"""Meta-data key/value pairs for a build"""
input BuildMetaDataInput {
"""Meta-data key/value pairs for a build"""
	key: String!
"""Meta-data key/value pairs for a build"""
	value: String!
}

"""Author for a build"""
input BuildAuthorInput {
"""Author for a build"""
	name: String!
"""Author for a build"""
	email: String!
}

"""Autogenerated return type of BuildAnnotate"""
type BuildAnnotatePayload {
	annotation: Annotation
	annotationEdge: AnnotationEdge
	build: Build
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
}

"""Autogenerated input type of BuildAnnotate"""
input BuildAnnotateInput {
"""Autogenerated input type of BuildAnnotate"""
	clientMutationId: String
"""Autogenerated input type of BuildAnnotate"""
	buildID: ID!
"""Autogenerated input type of BuildAnnotate"""
	body: String
"""Autogenerated input type of BuildAnnotate"""
	style: AnnotationStyle
"""Autogenerated input type of BuildAnnotate"""
	context: String
"""Autogenerated input type of BuildAnnotate"""
	append: Boolean
}

"""Autogenerated return type of BuildCancel"""
type BuildCancelPayload {
	build: Build!
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
}

"""Autogenerated input type of BuildCancel"""
input BuildCancelInput {
"""Autogenerated input type of BuildCancel"""
	clientMutationId: String
"""Autogenerated input type of BuildCancel"""
	id: ID!
}

"""Autogenerated return type of BuildRebuild"""
type BuildRebuildPayload {
	build: Build!
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	rebuild: Build!
}

"""Autogenerated input type of BuildRebuild"""
input BuildRebuildInput {
"""Autogenerated input type of BuildRebuild"""
	clientMutationId: String
"""Autogenerated input type of BuildRebuild"""
	id: ID!
}

"""Autogenerated return type of NoticeDismiss"""
type NoticeDismissPayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	notice: Notice
}

"""Autogenerated input type of NoticeDismiss"""
input NoticeDismissInput {
"""Autogenerated input type of NoticeDismiss"""
	clientMutationId: String
"""Autogenerated input type of NoticeDismiss"""
	id: ID!
}

"""Autogenerated return type of OrganizationMemberDelete"""
type OrganizationMemberDeletePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	deletedOrganizationMemberID: ID!
	organization: Organization
	user: User
}

"""Autogenerated input type of OrganizationMemberDelete"""
input OrganizationMemberDeleteInput {
"""Autogenerated input type of OrganizationMemberDelete"""
	clientMutationId: String
"""Autogenerated input type of OrganizationMemberDelete"""
	id: ID!
}

"""Autogenerated return type of OrganizationMemberUpdate"""
type OrganizationMemberUpdatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	organizationMember: OrganizationMember
}

"""Autogenerated input type of OrganizationMemberUpdate"""
input OrganizationMemberUpdateInput {
"""Autogenerated input type of OrganizationMemberUpdate"""
	clientMutationId: String
"""Autogenerated input type of OrganizationMemberUpdate"""
	id: ID!
"""Autogenerated input type of OrganizationMemberUpdate"""
	role: OrganizationMemberRole
"""Autogenerated input type of OrganizationMemberUpdate"""
	sso: OrganizationMemberSSOInput
}

"""Autogenerated return type of OrganizationInvitationCreate"""
type OrganizationInvitationCreatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	invitationEdges: [OrganizationInvitationEdge]
	organization: Organization
}

"""Autogenerated input type of OrganizationInvitationCreate"""
input OrganizationInvitationCreateInput {
"""Autogenerated input type of OrganizationInvitationCreate"""
	clientMutationId: String
"""Autogenerated input type of OrganizationInvitationCreate"""
	organizationID: ID!
"""Autogenerated input type of OrganizationInvitationCreate"""
	emails: [String!]!
"""Autogenerated input type of OrganizationInvitationCreate"""
	role: OrganizationMemberRole
"""Autogenerated input type of OrganizationInvitationCreate"""
	sso: OrganizationInvitationSSOInput
"""Autogenerated input type of OrganizationInvitationCreate"""
	teams: [OrganizationInvitationTeamAssignmentInput!]
}

input OrganizationInvitationSSOInput {
	mode: OrganizationMemberSSOModeEnum!
}

"""Used to assign teams to organization invitation in mutations"""
input OrganizationInvitationTeamAssignmentInput {
"""Used to assign teams to organization invitation in mutations"""
	id: ID!
"""Used to assign teams to organization invitation in mutations"""
	role: TeamMemberRole!
}

"""Autogenerated return type of OrganizationInvitationResend"""
type OrganizationInvitationResendPayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	organizationInvitation: OrganizationInvitation!
}

"""Autogenerated input type of OrganizationInvitationResend"""
input OrganizationInvitationResendInput {
"""Autogenerated input type of OrganizationInvitationResend"""
	clientMutationId: String
"""Autogenerated input type of OrganizationInvitationResend"""
	id: ID!
}

"""Autogenerated return type of OrganizationInvitationRevoke"""
type OrganizationInvitationRevokePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	organization: Organization!
	organizationInvitation: OrganizationInvitation!
	organizationInvitationEdge: OrganizationInvitationEdge!
}

"""Autogenerated input type of OrganizationInvitationRevoke"""
input OrganizationInvitationRevokeInput {
"""Autogenerated input type of OrganizationInvitationRevoke"""
	clientMutationId: String
"""Autogenerated input type of OrganizationInvitationRevoke"""
	id: ID!
}

"""Autogenerated return type of PipelineCreate"""
type PipelineCreatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	cluster: Cluster
	organization: Organization!
	pipeline: Pipeline!
	pipelineEdge: PipelineEdge!
}

"""Autogenerated input type of PipelineCreate"""
input PipelineCreateInput {
"""Autogenerated input type of PipelineCreate"""
	clientMutationId: String
"""Autogenerated input type of PipelineCreate"""
	organizationId: ID!
"""Autogenerated input type of PipelineCreate"""
	name: String!
"""Autogenerated input type of PipelineCreate"""
	description: String
"""Autogenerated input type of PipelineCreate"""
	visibility: PipelineVisibility
"""Autogenerated input type of PipelineCreate"""
	repository: PipelineRepositoryInput!
"""Autogenerated input type of PipelineCreate"""
	steps: PipelineStepsInput!
"""Autogenerated input type of PipelineCreate"""
	skipIntermediateBuilds: Boolean
"""Autogenerated input type of PipelineCreate"""
	skipIntermediateBuildsBranchFilter: String
"""Autogenerated input type of PipelineCreate"""
	cancelIntermediateBuilds: Boolean
"""Autogenerated input type of PipelineCreate"""
	cancelIntermediateBuildsBranchFilter: String
"""Autogenerated input type of PipelineCreate"""
	allowRebuilds: Boolean
"""Autogenerated input type of PipelineCreate"""
	teams: [PipelineTeamAssignmentInput!]
"""Autogenerated input type of PipelineCreate"""
	defaultBranch: String
"""Autogenerated input type of PipelineCreate"""
	nextBuildNumber: Int
"""Autogenerated input type of PipelineCreate"""
	clusterId: ID
"""Autogenerated input type of PipelineCreate"""
	tags: [PipelineTagInput!]
"""Autogenerated input type of PipelineCreate"""
	branchConfiguration: String
}

"""Step definition for a pipeline"""
input PipelineStepsInput {
"""Step definition for a pipeline"""
	yaml: String!
}

"""Used to assign teams to pipelines"""
input PipelineTeamAssignmentInput {
"""Used to assign teams to pipelines"""
	id: ID!
"""Used to assign teams to pipelines"""
	accessLevel: PipelineAccessLevels
}

"""Tag associated with a pipeline"""
input PipelineTagInput {
"""Tag associated with a pipeline"""
	label: String!
}

"""Autogenerated return type of PipelineUpdate"""
type PipelineUpdatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	pipeline: Pipeline!
}

"""Autogenerated input type of PipelineUpdate"""
input PipelineUpdateInput {
"""Autogenerated input type of PipelineUpdate"""
	clientMutationId: String
"""Autogenerated input type of PipelineUpdate"""
	id: ID!
"""Autogenerated input type of PipelineUpdate"""
	name: String
"""Autogenerated input type of PipelineUpdate"""
	description: String
"""Autogenerated input type of PipelineUpdate"""
	visibility: PipelineVisibility
"""Autogenerated input type of PipelineUpdate"""
	repository: PipelineRepositoryInput
"""Autogenerated input type of PipelineUpdate"""
	steps: PipelineStepsInput
"""Autogenerated input type of PipelineUpdate"""
	defaultBranch: String
"""Autogenerated input type of PipelineUpdate"""
	nextBuildNumber: Int
"""Autogenerated input type of PipelineUpdate"""
	skipIntermediateBuilds: Boolean
"""Autogenerated input type of PipelineUpdate"""
	skipIntermediateBuildsBranchFilter: String
"""Autogenerated input type of PipelineUpdate"""
	cancelIntermediateBuilds: Boolean
"""Autogenerated input type of PipelineUpdate"""
	cancelIntermediateBuildsBranchFilter: String
"""Autogenerated input type of PipelineUpdate"""
	allowRebuilds: Boolean
"""Autogenerated input type of PipelineUpdate"""
	clusterId: ID
"""Autogenerated input type of PipelineUpdate"""
	archived: Boolean
"""Autogenerated input type of PipelineUpdate"""
	tags: [PipelineTagInput!]
"""Autogenerated input type of PipelineUpdate"""
	branchConfiguration: String
}

"""Autogenerated return type of PipelineArchive"""
type PipelineArchivePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	pipeline: Pipeline!
}

"""Autogenerated input type of PipelineArchive"""
input PipelineArchiveInput {
"""Autogenerated input type of PipelineArchive"""
	clientMutationId: String
"""Autogenerated input type of PipelineArchive"""
	id: ID!
}

"""Autogenerated return type of PipelineUnarchive"""
type PipelineUnarchivePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	pipeline: Pipeline!
}

"""Autogenerated input type of PipelineUnarchive"""
input PipelineUnarchiveInput {
"""Autogenerated input type of PipelineUnarchive"""
	clientMutationId: String
"""Autogenerated input type of PipelineUnarchive"""
	id: ID!
}

"""Autogenerated return type of PipelineDelete"""
type PipelineDeletePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	deletedPipelineID: ID!
	organization: Organization!
}

"""Autogenerated input type of PipelineDelete"""
input PipelineDeleteInput {
"""Autogenerated input type of PipelineDelete"""
	clientMutationId: String
"""Autogenerated input type of PipelineDelete"""
	id: ID!
}

"""Autogenerated return type of PipelineFavorite"""
type PipelineFavoritePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	pipeline: Pipeline
}

"""Autogenerated input type of PipelineFavorite"""
input PipelineFavoriteInput {
"""Autogenerated input type of PipelineFavorite"""
	clientMutationId: String
"""Autogenerated input type of PipelineFavorite"""
	id: ID!
"""Autogenerated input type of PipelineFavorite"""
	favorite: Boolean!
}

"""Autogenerated return type of PipelineRotateWebhookURL"""
type PipelineRotateWebhookURLPayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	pipeline: Pipeline!
}

"""Autogenerated input type of PipelineRotateWebhookURL"""
input PipelineRotateWebhookURLInput {
"""Autogenerated input type of PipelineRotateWebhookURL"""
	clientMutationId: String
"""Autogenerated input type of PipelineRotateWebhookURL"""
	id: ID!
}

"""Autogenerated return type of PipelineCreateWebhook"""
type PipelineCreateWebhookPayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	pipelineID: ID!
}

"""Autogenerated input type of PipelineCreateWebhook"""
input PipelineCreateWebhookInput {
"""Autogenerated input type of PipelineCreateWebhook"""
	clientMutationId: String
"""Autogenerated input type of PipelineCreateWebhook"""
	id: ID!
}

"""Autogenerated return type of PipelineScheduleCreate"""
type PipelineScheduleCreatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	pipeline: Pipeline!
	pipelineScheduleEdge: PipelineScheduleEdge!
}

"""Autogenerated input type of PipelineScheduleCreate"""
input PipelineScheduleCreateInput {
"""Autogenerated input type of PipelineScheduleCreate"""
	clientMutationId: String
"""Autogenerated input type of PipelineScheduleCreate"""
	pipelineID: ID!
"""Autogenerated input type of PipelineScheduleCreate"""
	label: String
"""Autogenerated input type of PipelineScheduleCreate"""
	cronline: String
"""Autogenerated input type of PipelineScheduleCreate"""
	message: String
"""Autogenerated input type of PipelineScheduleCreate"""
	commit: String
"""Autogenerated input type of PipelineScheduleCreate"""
	branch: String
"""Autogenerated input type of PipelineScheduleCreate"""
	env: String
"""Autogenerated input type of PipelineScheduleCreate"""
	enabled: Boolean
}

"""Autogenerated return type of PipelineScheduleDelete"""
type PipelineScheduleDeletePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	deletedPipelineScheduleID: ID!
	pipeline: Pipeline
}

"""Autogenerated input type of PipelineScheduleDelete"""
input PipelineScheduleDeleteInput {
"""Autogenerated input type of PipelineScheduleDelete"""
	clientMutationId: String
"""Autogenerated input type of PipelineScheduleDelete"""
	id: ID!
}

"""Autogenerated return type of PipelineScheduleUpdate"""
type PipelineScheduleUpdatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	pipelineSchedule: PipelineSchedule!
}

"""Autogenerated input type of PipelineScheduleUpdate"""
input PipelineScheduleUpdateInput {
"""Autogenerated input type of PipelineScheduleUpdate"""
	clientMutationId: String
"""Autogenerated input type of PipelineScheduleUpdate"""
	id: ID!
"""Autogenerated input type of PipelineScheduleUpdate"""
	label: String
"""Autogenerated input type of PipelineScheduleUpdate"""
	cronline: String
"""Autogenerated input type of PipelineScheduleUpdate"""
	message: String
"""Autogenerated input type of PipelineScheduleUpdate"""
	commit: String
"""Autogenerated input type of PipelineScheduleUpdate"""
	branch: String
"""Autogenerated input type of PipelineScheduleUpdate"""
	env: String
"""Autogenerated input type of PipelineScheduleUpdate"""
	enabled: Boolean
}

"""Autogenerated return type of TeamCreate"""
type TeamCreatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	organization: Organization!
	teamEdge: TeamEdge!
}

"""Autogenerated input type of TeamCreate"""
input TeamCreateInput {
"""Autogenerated input type of TeamCreate"""
	clientMutationId: String
"""Autogenerated input type of TeamCreate"""
	organizationID: ID!
"""Autogenerated input type of TeamCreate"""
	name: String!
"""Autogenerated input type of TeamCreate"""
	description: String
"""Autogenerated input type of TeamCreate"""
	privacy: TeamPrivacy!
"""Autogenerated input type of TeamCreate"""
	isDefaultTeam: Boolean!
"""Autogenerated input type of TeamCreate"""
	defaultMemberRole: TeamMemberRole!
"""Autogenerated input type of TeamCreate"""
	membersCanCreatePipelines: Boolean
"""Autogenerated input type of TeamCreate"""
	membersCanDeletePipelines: Boolean
}

"""Autogenerated return type of TeamDelete"""
type TeamDeletePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	deletedTeamID: ID!
	organization: Organization!
}

"""Autogenerated input type of TeamDelete"""
input TeamDeleteInput {
"""Autogenerated input type of TeamDelete"""
	clientMutationId: String
"""Autogenerated input type of TeamDelete"""
	id: ID!
}

"""Autogenerated return type of TeamUpdate"""
type TeamUpdatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	team: Team!
}

"""Autogenerated input type of TeamUpdate"""
input TeamUpdateInput {
"""Autogenerated input type of TeamUpdate"""
	clientMutationId: String
"""Autogenerated input type of TeamUpdate"""
	id: ID!
"""Autogenerated input type of TeamUpdate"""
	name: String!
"""Autogenerated input type of TeamUpdate"""
	description: String
"""Autogenerated input type of TeamUpdate"""
	privacy: TeamPrivacy
"""Autogenerated input type of TeamUpdate"""
	isDefaultTeam: Boolean!
"""Autogenerated input type of TeamUpdate"""
	defaultMemberRole: TeamMemberRole!
"""Autogenerated input type of TeamUpdate"""
	membersCanCreatePipelines: Boolean
"""Autogenerated input type of TeamUpdate"""
	membersCanDeletePipelines: Boolean
}

"""Autogenerated return type of TeamMemberCreate"""
type TeamMemberCreatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	team: Team
	teamMemberEdge: TeamMemberEdge
}

"""Autogenerated input type of TeamMemberCreate"""
input TeamMemberCreateInput {
"""Autogenerated input type of TeamMemberCreate"""
	clientMutationId: String
"""Autogenerated input type of TeamMemberCreate"""
	teamID: ID!
"""Autogenerated input type of TeamMemberCreate"""
	userID: ID!
}

"""Autogenerated return type of TeamMemberUpdate"""
type TeamMemberUpdatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	teamMember: TeamMember!
}

"""Autogenerated input type of TeamMemberUpdate"""
input TeamMemberUpdateInput {
"""Autogenerated input type of TeamMemberUpdate"""
	clientMutationId: String
"""Autogenerated input type of TeamMemberUpdate"""
	id: ID!
"""Autogenerated input type of TeamMemberUpdate"""
	role: TeamMemberRole!
}

"""Autogenerated return type of TeamMemberDelete"""
type TeamMemberDeletePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	deletedTeamMemberID: ID!
	team: Team
}

"""Autogenerated input type of TeamMemberDelete"""
input TeamMemberDeleteInput {
"""Autogenerated input type of TeamMemberDelete"""
	clientMutationId: String
"""Autogenerated input type of TeamMemberDelete"""
	id: ID!
}

"""Autogenerated return type of TeamPipelineCreate"""
type TeamPipelineCreatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	pipeline: Pipeline
	team: Team
	teamPipeline: TeamPipeline
	teamPipelineEdge: TeamPipelineEdge
}

"""Autogenerated input type of TeamPipelineCreate"""
input TeamPipelineCreateInput {
"""Autogenerated input type of TeamPipelineCreate"""
	clientMutationId: String
"""Autogenerated input type of TeamPipelineCreate"""
	teamID: ID!
"""Autogenerated input type of TeamPipelineCreate"""
	pipelineID: ID!
"""Autogenerated input type of TeamPipelineCreate"""
	accessLevel: PipelineAccessLevels
}

"""Autogenerated return type of TeamPipelineUpdate"""
type TeamPipelineUpdatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	teamPipeline: TeamPipeline!
}

"""Autogenerated input type of TeamPipelineUpdate"""
input TeamPipelineUpdateInput {
"""Autogenerated input type of TeamPipelineUpdate"""
	clientMutationId: String
"""Autogenerated input type of TeamPipelineUpdate"""
	id: ID!
"""Autogenerated input type of TeamPipelineUpdate"""
	accessLevel: PipelineAccessLevels!
}

"""Autogenerated return type of TeamPipelineDelete"""
type TeamPipelineDeletePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	deletedTeamPipelineID: ID!
	team: Team
}

"""Autogenerated input type of TeamPipelineDelete"""
input TeamPipelineDeleteInput {
"""Autogenerated input type of TeamPipelineDelete"""
	clientMutationId: String
"""Autogenerated input type of TeamPipelineDelete"""
	id: ID!
"""Autogenerated input type of TeamPipelineDelete"""
	force: Boolean
}

"""Autogenerated return type of TeamSuiteCreate"""
type TeamSuiteCreatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	suite: Suite
	team: Team
	teamSuite: TeamSuite
	teamSuiteEdge: TeamSuiteEdge
}

"""Autogenerated input type of TeamSuiteCreate"""
input TeamSuiteCreateInput {
"""Autogenerated input type of TeamSuiteCreate"""
	clientMutationId: String
"""Autogenerated input type of TeamSuiteCreate"""
	teamID: ID!
"""Autogenerated input type of TeamSuiteCreate"""
	suiteID: ID!
"""Autogenerated input type of TeamSuiteCreate"""
	accessLevel: SuiteAccessLevels
}

"""Autogenerated return type of TeamSuiteUpdate"""
type TeamSuiteUpdatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	teamSuite: TeamSuite!
}

"""Autogenerated input type of TeamSuiteUpdate"""
input TeamSuiteUpdateInput {
"""Autogenerated input type of TeamSuiteUpdate"""
	clientMutationId: String
"""Autogenerated input type of TeamSuiteUpdate"""
	id: ID!
"""Autogenerated input type of TeamSuiteUpdate"""
	accessLevel: SuiteAccessLevels!
}

"""Autogenerated return type of TeamSuiteDelete"""
type TeamSuiteDeletePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	deletedTeamSuiteID: ID!
	team: Team
}

"""Autogenerated input type of TeamSuiteDelete"""
input TeamSuiteDeleteInput {
"""Autogenerated input type of TeamSuiteDelete"""
	clientMutationId: String
"""Autogenerated input type of TeamSuiteDelete"""
	id: ID!
"""Autogenerated input type of TeamSuiteDelete"""
	force: Boolean
}

"""Autogenerated return type of TOTPCreate"""
type TOTPCreatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
"""The URI to enter into your one-time password generator. Usually presented to the user as a QR Code"""
	provisioningUri: String!
	totp: TOTP!
}

"""Autogenerated input type of TOTPCreate"""
input TOTPCreateInput {
"""Autogenerated input type of TOTPCreate"""
	clientMutationId: String
}

"""Autogenerated return type of TOTPActivate"""
type TOTPActivatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	totp: TOTP!
	viewer: Viewer!
}

"""Autogenerated input type of TOTPActivate"""
input TOTPActivateInput {
"""Autogenerated input type of TOTPActivate"""
	clientMutationId: String
"""Autogenerated input type of TOTPActivate"""
	id: ID!
"""Autogenerated input type of TOTPActivate"""
	token: String!
}

"""Autogenerated return type of TOTPRecoveryCodesRegenerate"""
type TOTPRecoveryCodesRegeneratePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	recoveryCodes: RecoveryCodeBatch!
	totp: TOTP!
}

"""Autogenerated input type of TOTPRecoveryCodesRegenerate"""
input TOTPRecoveryCodesRegenerateInput {
"""Autogenerated input type of TOTPRecoveryCodesRegenerate"""
	clientMutationId: String
"""Autogenerated input type of TOTPRecoveryCodesRegenerate"""
	totpId: ID!
}

"""Autogenerated return type of TOTPDelete"""
type TOTPDeletePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	viewer: Viewer!
}

"""Autogenerated input type of TOTPDelete"""
input TOTPDeleteInput {
"""Autogenerated input type of TOTPDelete"""
	clientMutationId: String
"""Autogenerated input type of TOTPDelete"""
	id: ID!
}

"""Autogenerated return type of EmailCreate"""
type EmailCreatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	emailEdge: EmailEdge!
	viewer: Viewer!
}

"""Autogenerated input type of EmailCreate"""
input EmailCreateInput {
"""Autogenerated input type of EmailCreate"""
	clientMutationId: String
"""Autogenerated input type of EmailCreate"""
	address: String!
}

"""Autogenerated return type of EmailResendVerification"""
type EmailResendVerificationPayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	email: Email!
}

"""Autogenerated input type of EmailResendVerification"""
input EmailResendVerificationInput {
"""Autogenerated input type of EmailResendVerification"""
	clientMutationId: String
"""Autogenerated input type of EmailResendVerification"""
	id: ID!
}

"""Autogenerated return type of JobTypeBlockUnblock"""
type JobTypeBlockUnblockPayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	jobTypeBlock: JobTypeBlock!
}

"""Autogenerated input type of JobTypeBlockUnblock"""
input JobTypeBlockUnblockInput {
"""Autogenerated input type of JobTypeBlockUnblock"""
	clientMutationId: String
"""Autogenerated input type of JobTypeBlockUnblock"""
	id: ID!
"""Autogenerated input type of JobTypeBlockUnblock"""
	fields: JSON
}

"""Autogenerated return type of JobTypeCommandCancel"""
type JobTypeCommandCancelPayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	jobTypeCommand: JobTypeCommand!
}

"""Autogenerated input type of JobTypeCommandCancel"""
input JobTypeCommandCancelInput {
"""Autogenerated input type of JobTypeCommandCancel"""
	clientMutationId: String
"""Autogenerated input type of JobTypeCommandCancel"""
	id: ID!
}

"""Autogenerated return type of JobTypeCommandRetry"""
type JobTypeCommandRetryPayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	jobTypeCommand: JobTypeCommand!
	retriedInJobTypeCommand: JobTypeCommand!
}

"""Autogenerated input type of JobTypeCommandRetry"""
input JobTypeCommandRetryInput {
"""Autogenerated input type of JobTypeCommandRetry"""
	clientMutationId: String
"""Autogenerated input type of JobTypeCommandRetry"""
	id: ID!
}

"""Autogenerated return type of GraphQLSnippetCreate"""
type GraphQLSnippetCreatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	graphQLSnippet: GraphQLSnippet!
}

"""Autogenerated input type of GraphQLSnippetCreate"""
input GraphQLSnippetCreateInput {
"""Autogenerated input type of GraphQLSnippetCreate"""
	clientMutationId: String
"""Autogenerated input type of GraphQLSnippetCreate"""
	query: String!
"""Autogenerated input type of GraphQLSnippetCreate"""
	operationName: ID
}

"""Autogenerated return type of SSOProviderCreate"""
type SSOProviderCreatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	organization: Organization!
	ssoProvider: SSOProvider!
	ssoProviderEdge: SSOProviderEdge!
}

"""Autogenerated input type of SSOProviderCreate"""
input SSOProviderCreateInput {
"""Autogenerated input type of SSOProviderCreate"""
	clientMutationId: String
"""Autogenerated input type of SSOProviderCreate"""
	organizationId: ID!
"""Autogenerated input type of SSOProviderCreate"""
	type: SSOProviderTypes!
"""Autogenerated input type of SSOProviderCreate"""
	note: String
"""Autogenerated input type of SSOProviderCreate"""
	sessionDurationInHours: Int
"""Autogenerated input type of SSOProviderCreate"""
	emailDomain: String
"""Autogenerated input type of SSOProviderCreate"""
	emailDomainVerificationAddress: String
"""Autogenerated input type of SSOProviderCreate"""
	identityProvider: SSOProviderSAMLIdP
"""Autogenerated input type of SSOProviderCreate"""
	digestMethod: SSOProviderSAMLXMLSecurity
"""Autogenerated input type of SSOProviderCreate"""
	signatureMethod: SSOProviderSAMLRSAXMLSecurity
"""Autogenerated input type of SSOProviderCreate"""
	githubOrganizationName: String
"""Autogenerated input type of SSOProviderCreate"""
	googleHostedDomain: String
"""Autogenerated input type of SSOProviderCreate"""
	discloseGoogleHostedDomain: Boolean
}

input SSOProviderSAMLIdP {
	issuer: String
	ssoURL: String
	certificate: String
	metadata: SSOProviderSAMLIdPMetadata
}

input SSOProviderSAMLIdPMetadata {
	xml: XML
	url: String
}

"""Autogenerated return type of SSOProviderUpdate"""
type SSOProviderUpdatePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	ssoProvider: SSOProvider!
}

"""Autogenerated input type of SSOProviderUpdate"""
input SSOProviderUpdateInput {
"""Autogenerated input type of SSOProviderUpdate"""
	clientMutationId: String
"""Autogenerated input type of SSOProviderUpdate"""
	id: ID!
"""Autogenerated input type of SSOProviderUpdate"""
	note: String
"""Autogenerated input type of SSOProviderUpdate"""
	sessionDurationInHours: Int
"""Autogenerated input type of SSOProviderUpdate"""
	emailDomain: String
"""Autogenerated input type of SSOProviderUpdate"""
	emailDomainVerificationAddress: String
"""Autogenerated input type of SSOProviderUpdate"""
	identityProvider: SSOProviderSAMLIdP
"""Autogenerated input type of SSOProviderUpdate"""
	digestMethod: SSOProviderSAMLXMLSecurity
"""Autogenerated input type of SSOProviderUpdate"""
	signatureMethod: SSOProviderSAMLRSAXMLSecurity
"""Autogenerated input type of SSOProviderUpdate"""
	githubOrganizationName: String
"""Autogenerated input type of SSOProviderUpdate"""
	googleHostedDomain: String
"""Autogenerated input type of SSOProviderUpdate"""
	discloseGoogleHostedDomain: Boolean
}

"""Autogenerated return type of SSOProviderEnable"""
type SSOProviderEnablePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	ssoProvider: SSOProvider!
}

"""Autogenerated input type of SSOProviderEnable"""
input SSOProviderEnableInput {
"""Autogenerated input type of SSOProviderEnable"""
	clientMutationId: String
"""Autogenerated input type of SSOProviderEnable"""
	id: ID!
}

"""Autogenerated return type of SSOProviderDisable"""
type SSOProviderDisablePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	ssoProvider: SSOProvider!
}

"""Autogenerated input type of SSOProviderDisable"""
input SSOProviderDisableInput {
"""Autogenerated input type of SSOProviderDisable"""
	clientMutationId: String
"""Autogenerated input type of SSOProviderDisable"""
	id: ID!
"""Autogenerated input type of SSOProviderDisable"""
	disabledReason: String
}

"""Autogenerated return type of SSOProviderDelete"""
type SSOProviderDeletePayload {
"""A unique identifier for the client performing the mutation."""
	clientMutationId: String
	deletedSSOProviderId: ID!
	organization: Organization!
}

"""Autogenerated input type of SSOProviderDelete"""
input SSOProviderDeleteInput {
"""Autogenerated input type of SSOProviderDelete"""
	clientMutationId: String
"""Autogenerated input type of SSOProviderDelete"""
	id: ID!
}

"""A Google account authorized with a Buildkite account"""
type AuthorizationGoogle implements Authorization & Node{
	id: ID!
}

"""A SAML account authorized with a Buildkite account"""
type AuthorizationSAML implements Authorization & Node{
	id: ID!
}

"""A build was triggered via an API"""
type BuildSourceAPI implements BuildSource{
	name: String!
}

"""A build was triggered manually via the frontend"""
type BuildSourceFrontend implements BuildSource{
	name: String!
}

"""A build was triggered via a schedule"""
type BuildSourceSchedule implements BuildSource{
	name: String!
"""The associated schedule that created this build. Will be `null` if the associated schedule has been deleted."""
	pipelineSchedule: PipelineSchedule
}

"""A build was triggered via a trigger job"""
type BuildSourceTriggerJob implements BuildSource{
	name: String!
}

"""A build was triggered via a Webhook"""
type BuildSourceWebhook implements BuildSource{
"""Provider specific headers sent along with the webhook. This will return null if the webhook has been purged by Buildkite."""
	headers: [String!]
	name: String!
"""The body of the webhook. Buildkite only webhook data for a short period of time, so if this returns null - then the webhook data has been purged by Buildkite"""
	payload: JSON
"""The UUID for this webhook. This will return null if the webhook has been purged by Buildkite"""
	uuid: String
}

"""A pipeline's repository is being provided by Beanstalk"""
type RepositoryProviderBeanstalk implements RepositoryProvider{
"""The name of the provider"""
	name: String!
"""This URL to the provider’s web interface"""
	url: String
"""The URL to use when setting up webhooks from the provider to trigger Buildkite builds"""
	webhookUrl: String
}

"""A pipeline's repository is being provided by Bitbucket Server"""
type RepositoryProviderBitbucketServer implements RepositoryProvider{
"""The name of the provider"""
	name: String!
"""This URL to the provider’s web interface"""
	url: String
"""The URL to use when setting up webhooks from the provider to trigger Buildkite builds"""
	webhookUrl: String
}

"""A pipeline's repository is being provided by Bitbucket"""
type RepositoryProviderBitbucket implements RepositoryProvider{
"""The name of the provider"""
	name: String!
"""This URL to the provider’s web interface"""
	url: String
"""The URL to use when setting up webhooks from the provider to trigger Buildkite builds"""
	webhookUrl: String
}

"""A pipeline's repository is being provided by Codebase"""
type RepositoryProviderCodebase implements RepositoryProvider{
"""The name of the provider"""
	name: String!
"""This URL to the provider’s web interface"""
	url: String
"""The URL to use when setting up webhooks from the provider to trigger Buildkite builds"""
	webhookUrl: String
}

"""A pipeline's repository is being provided by GitHub Enterprise"""
type RepositoryProviderGithubEnterprise implements RepositoryProvider{
"""The name of the provider"""
	name: String!
"""This URL to the provider’s web interface"""
	url: String
"""The URL to use when setting up webhooks from the provider to trigger Buildkite builds"""
	webhookUrl: String
}

"""A pipeline's repository is being provided by GitHub"""
type RepositoryProviderGithub implements RepositoryProvider{
"""The name of the provider"""
	name: String!
"""This URL to the provider’s web interface"""
	url: String
"""The URL to use when setting up webhooks from the provider to trigger Buildkite builds"""
	webhookUrl: String
}

"""A pipeline's repository is being provided by Gitlab Community Edition"""
type RepositoryProviderGitlabCommunity implements RepositoryProvider{
"""The name of the provider"""
	name: String!
"""This URL to the provider’s web interface"""
	url: String
"""The URL to use when setting up webhooks from the provider to trigger Buildkite builds"""
	webhookUrl: String
}

"""A pipeline's repository is being provided by Gitlab Enterprise Edition"""
type RepositoryProviderGitlabEnterprise implements RepositoryProvider{
"""The name of the provider"""
	name: String!
"""This URL to the provider’s web interface"""
	url: String
"""The URL to use when setting up webhooks from the provider to trigger Buildkite builds"""
	webhookUrl: String
}

"""A pipeline's repository is being provided by Gitlab"""
type RepositoryProviderGitlab implements RepositoryProvider{
"""The name of the provider"""
	name: String!
"""This URL to the provider’s web interface"""
	url: String
"""The URL to use when setting up webhooks from the provider to trigger Buildkite builds"""
	webhookUrl: String
}

"""A pipeline's repository is being provided by a service unknown to Buildkite"""
type RepositoryProviderUnknown implements RepositoryProvider{
"""The name of the provider"""
	name: String!
"""This URL to the provider’s web interface"""
	url: String
"""The URL to use when setting up webhooks from the provider to trigger Buildkite builds"""
	webhookUrl: String
}

"""A generic event type that doesn't have any additional meta-information associated with the event"""
type JobEventGeneric implements Node & JobEvent{
"""The actor that caused this event to occur"""
	actor: JobEventActor!
	id: ID!
"""The job that this event belongs to"""
	job: JobTypeCommand!
"""The time when the event occurred"""
	timestamp: DateTime!
"""The type of event"""
	type: JobEventType!
"""The public UUID for this job event"""
	uuid: ID!
}

"""An event created when the dispatcher assigns the job to an agent"""
type JobEventAssigned implements Node & JobEvent{
"""The actor that caused this event to occur"""
	actor: JobEventActor!
"""The agent the job was assigned to"""
	assignedAgent: Agent!
	id: ID!
"""The job that this event belongs to"""
	job: JobTypeCommand!
"""The time when the event occurred"""
	timestamp: DateTime!
"""The type of event"""
	type: JobEventType!
"""The public UUID for this job event"""
	uuid: ID!
}

"""An event created when the job is canceled"""
type JobEventCanceled implements Node & JobEvent{
"""The actor that caused this event to occur"""
	actor: JobEventActor!
	exitStatus: JSInt!
	id: ID!
"""The job that this event belongs to"""
	job: JobTypeCommand!
"""The time when the event occurred"""
	timestamp: DateTime!
"""The type of event"""
	type: JobEventType!
"""The public UUID for this job event"""
	uuid: ID!
}

"""Represents non-fractional signed whole numeric values.

`JSInt` can represent values between -(2^53) + 1 and 2^53 - 1.
"""
scalar JSInt

"""An event created when the job is finished"""
type JobEventFinished implements Node & JobEvent{
"""The actor that caused this event to occur"""
	actor: JobEventActor!
"""The exit status returned by the command on the agent. A value of `-1` indicates either that the agent was lost or the process was killed. If the process was killed, the `signal` field will be non-null."""
	exitStatus: JSInt!
	id: ID!
"""The job that this event belongs to"""
	job: JobTypeCommand!
"""The termination signal which killed the command, if the command was killed"""
	signal: String
"""If the termination signal was sent by the agent, the reason the agent took that action. If this field is null, and the `signal` field is not null, the command was killed by another process or by the operating system."""
	signalReason: JobEventSignalReason
"""The time when the event occurred"""
	timestamp: DateTime!
"""The type of event"""
	type: JobEventType!
"""The public UUID for this job event"""
	uuid: ID!
}

"""An event created when the job is retried"""
type JobEventRetried implements Node & JobEvent{
"""The actor that caused this event to occur"""
	actor: JobEventActor!
	automaticRule: JobRetryRuleAutomatic
	id: ID!
"""The job that this event belongs to"""
	job: JobTypeCommand!
	retriedInJob: JobTypeCommand
"""The time when the event occurred"""
	timestamp: DateTime!
"""The type of event"""
	type: JobEventType!
"""The public UUID for this job event"""
	uuid: ID!
}

"""An event created when the job is timed out"""
type JobEventTimedOut implements Node & JobEvent{
"""The actor that caused this event to occur"""
	actor: JobEventActor!
	exitStatus: JSInt!
	id: ID!
"""The job that this event belongs to"""
	job: JobTypeCommand!
"""The time when the event occurred"""
	timestamp: DateTime!
"""The type of event"""
	type: JobEventType!
"""The public UUID for this job event"""
	uuid: ID!
}

"""An event created when the job creates new build steps via pipeline upload"""
type JobEventBuildStepUploadCreated implements Node & JobEvent{
"""The actor that caused this event to occur"""
	actor: JobEventActor!
	buildStepUpload: BuildStepUpload!
	id: ID!
"""The job that this event belongs to"""
	job: JobTypeCommand!
"""The time when the event occurred"""
	timestamp: DateTime!
"""The type of event"""
	type: JobEventType!
"""The public UUID for this job event"""
	uuid: ID!
}

"""The results of a `buildkite-agent pipeline upload`"""
type BuildStepUpload {
"""The uploaded step definition"""
	definition: BuildStepUploadDefinition!
	id: ID!
"""The UUID for this build step upload"""
	uuid: ID!
}

"""The pipeline definition for a step upload"""
type BuildStepUploadDefinition {
"""The uploaded step definition rendered as JSON"""
	json: String!
"""The uploaded step definition rendered as YAML"""
	yaml: String!
}


