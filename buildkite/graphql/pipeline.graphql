fragment PipelineValues on Pipeline {
    id
    allowRebuilds
    # @genqlient(pointer: true)
    branchConfiguration
    cancelIntermediateBuilds
    cancelIntermediateBuildsBranchFilter
    cluster {
        # @genqlient(pointer: true)
        id
    }
    # @genqlient(pointer: true)
    color
    defaultBranch
    # @genqlient(pointer: true)
    defaultTimeoutInMinutes
    # @genqlient(pointer: true)
    emoji
    # @genqlient(pointer: true)
    maximumTimeoutInMinutes
    description
    name
    repository {
        url
    }
    skipIntermediateBuilds
    skipIntermediateBuildsBranchFilter
    slug
    steps {
        yaml
    }
    tags {
        label
    }
    webhookURL
}

query getPipeline($slug: ID!) {
    pipeline(slug: $slug) {
        ...PipelineValues
    }
}

# @genqlient(for: "PipelineCreateInput.branchConfiguration", pointer: true)
# @genqlient(for: "PipelineCreateInput.clusterId", pointer: true)
# @genqlient(for: "PipelineCreateInput.color", pointer: true)
# @genqlient(for: "PipelineCreateInput.emoji", pointer: true)
# @genqlient(for: "PipelineCreateInput.nextBuildNumber", omitempty: true)
# @genqlient(for: "PipelineCreateInput.pipelineTemplateId", omitempty: true)
# @genqlient(for: "PipelineCreateInput.visibility", omitempty: true)
# @genqlient(for: "PipelineCreateInput.defaultTimeoutInMinutes", pointer: true)
# @genqlient(for: "PipelineCreateInput.maximumTimeoutInMinutes", pointer: true)
mutation createPipeline(
    $input: PipelineCreateInput!
) {
    pipelineCreate(input: $input) {
        pipeline {
            ...PipelineValues
        }
    }
}

# @genqlient(for: "PipelineUpdateInput.clusterId", pointer: true)
# @genqlient(for: "PipelineUpdateInput.color", pointer: true)
# @genqlient(for: "PipelineUpdateInput.emoji", pointer: true)
# @genqlient(for: "PipelineUpdateInput.visibility", omitempty: true)
# @genqlient(for: "PipelineUpdateInput.branchConfiguration", pointer:true)
# @genqlient(for: "PipelineUpdateInput.pipelineTemplateId", omitempty: true)
# @genqlient(for: "PipelineUpdateInput.archived", omitempty: true)
# @genqlient(for: "PipelineUpdateInput.nextBuildNumber", omitempty: true)
# @genqlient(for: "PipelineUpdateInput.defaultTimeoutInMinutes", pointer: true)
# @genqlient(for: "PipelineUpdateInput.maximumTimeoutInMinutes", pointer: true)
mutation updatePipeline(
    $input: PipelineUpdateInput!
) {
    pipelineUpdate(input: $input) {
        pipeline {
            ...PipelineValues
        }
    }
}

mutation deletePipeline ($id: ID!) {
    pipelineDelete(input: {
        id: $id
    }) {
        clientMutationId
    }
}

mutation archivePipeline ($id: ID!) {
  pipelineArchive(input:{
    id: $id
  }) {
    clientMutationId
  }
}
